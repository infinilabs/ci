# =========================================================================
# Stage 1: jdk-builder
# Purpose: Create a minimal, custom Java Runtime Environment (JRE) using jlink.
# This stage uses a build argument (JDK_TAG) to conditionally download the
# correct JDK: GraalVM for jdk-21, and Zulu OpenJDK for others.
# =========================================================================
FROM almalinux:9 AS jdk-builder

# ARG TARGETARCH is automatically provided by Docker Buildx (e.g., "amd64", "arm64").
ARG TARGETARCH

# ARG JDK_TAG receives the build argument from the 'docker/build-push-action'.
# Its value will be 'jdk-11', 'jdk-17', 'jdk-21', etc.
ARG JDK_TAG

# Install necessary tools for downloading and archiving.
RUN dnf clean all && \
    dnf install -y --allowerasing --setopt install_weak_deps=False curl tar gzip

WORKDIR /tmp

# Download the correct JDK based on JDK_TAG, generate the minimal JRE, and package it.
RUN set -eux; \
    DOWNLOAD_URL=""; \
    # Determine the correct architecture string for download URLs.
    # Note: GraalVM and Zulu use slightly different architecture names.
    case "${TARGETARCH}" in \
        "amd64") JDK_ARCH="x64"; ;; \
        "arm64") JDK_ARCH="aarch64"; ;; \
        *) echo "Unsupported architecture: ${TARGETARCH}"; exit 1; ;; \
    esac; \
    \
    # Select the JDK distribution based on the JDK_TAG build argument.
    echo "Preparing to build JRE for tag: ${JDK_TAG}"; \
    case "${JDK_TAG}" in \
        "jdk-21") \
            # Using the official Oracle GraalVM download link for JDK 21.
            echo "Selecting Oracle GraalVM for JDK 21..."; \
            DOWNLOAD_URL="https://download.oracle.com/graalvm/21/latest/graalvm-jdk-21_linux-${JDK_ARCH}_bin.tar.gz"; \
            ;; \
        "jdk-17") \
            # Using updated, verified Zulu JDK 17 link.
            echo "Selecting Zulu OpenJDK for JDK 17..."; \
            ZULU_VERSION_NUM="17.0.17"; \
            ZULU_VERSION="17.62.17"; \
            DOWNLOAD_URL="https://cdn.azul.com/zulu/bin/zulu${ZULU_VERSION}-ca-jdk${ZULU_VERSION_NUM}-linux_${JDK_ARCH}.tar.gz"; \
            ;; \
        "jdk-11") \
            # Using updated, verified Zulu JDK 11 link.
            echo "Selecting Zulu OpenJDK for JDK 11..."; \
            ZULU_VERSION_NUM="11.0.29"; \
            ZULU_VERSION="11.84.17"; \
            DOWNLOAD_URL="https://cdn.azul.com/zulu/bin/zulu${ZULU_VERSION}-ca-jdk${ZULU_VERSION_NUM}-linux_${JDK_ARCH}.tar.gz"; \
            ;; \
        *) \
            echo "Unsupported JDK_TAG: ${JDK_TAG}"; \
            exit 1; \
            ;; \
    esac; \
    \
    # --- Common Steps: Download, Extract, jlink, Package ---
    echo "Downloading JDK from ${DOWNLOAD_URL}"; \
    curl -fL -o jdk.tar.gz "${DOWNLOAD_URL}"; \
    tar -xzf jdk.tar.gz; \
    rm jdk.tar.gz; \
    # Find the extracted directory name, which can vary between providers.
    JDK_DIR=$(ls -d ./*jdk* ./*graalvm* | head -n 1); \
    \
    echo "Creating minimal JRE with jlink from ${JDK_DIR}..."; \
    ./${JDK_DIR}/bin/jlink \
        --add-modules java.base,java.prefs,java.xml.crypto,jdk.hotspot.agent,jdk.internal.vm.compiler.management,jdk.net,java.compiler,java.xml,jdk.httpserver,jdk.jartool,jdk.jshell,java.datatransfer,java.scripting,jdk.accessibility,jdk.javadoc,jdk.jsobject,java.security.jgss,jdk.attach,jdk.jcmd,jdk.jstatd,jdk.sctp,java.instrument,java.security.sasl,jdk.charsets,jdk.internal.ed,jdk.jconsole,jdk.localedata,jdk.security.auth,java.logging,java.se,jdk.compiler,jdk.internal.jvmstat,jdk.jdeps,jdk.management.agent,jdk.security.jgss,java.management,java.smartcardio,jdk.crypto.cryptoki,jdk.internal.le,jdk.jdi,jdk.management.jfr,jdk.crypto.ec,jdk.internal.opt,jdk.jdwp.agent,jdk.management,jdk.unsupported,java.naming,jdk.dynalink,jdk.internal.vm.ci,jdk.jfr,jdk.naming.dns,jdk.xml.dom,java.net.http,java.transaction.xa,jdk.editpad,jdk.internal.vm.compiler,jdk.jlink,jdk.zipfs \
        --output jre-minimal \
        --strip-debug \
        --no-man-pages \
        --no-header-files \
        --compress=2; \
    \
    tar -czf /jre-minimal.tar.gz jre-minimal; \
    rm -rf /tmp/*;


# =========================================================================
# Stage 2: builder
# Purpose: Prepare the main filesystem layer. The ADD/COPY paths in this stage
# are relative to the build context, which is the 'deps' directory.
# =========================================================================
FROM almalinux:9 AS builder

ARG TARGETARCH
WORKDIR /

# Install base OS tools and dependencies.
RUN dnf clean all && \
    dnf install -y --allowerasing --setopt install_weak_deps=False \
    which lsof net-tools nmap-ncat bind-utils procps-ng openssl gzip python-pip

# Create a non-root user and group for the application.
RUN mkdir -p /app/easysearch \
    && groupadd -r -g 602 ezs \
    && useradd -r -l -u 602 -g 602 -s /bin/bash -d /app ezs \
    && usermod -c "INFINI Easysearch Operator" ezs

# Install Supervisor for process management.
RUN python3 -m pip install supervisor --no-warn-script-location --disable-pip-version-check --no-cache-dir \
    && ln -s /usr/local/bin/* /usr/bin \
    && supervisord -v

# Copy the custom JRE tarball from the 'jdk-builder' stage.
COPY --from=jdk-builder /jre-minimal.tar.gz /tmp/jre-minimal.tar.gz

# Extract the JRE and set appropriate ownership.
RUN mkdir -p /usr/local/jdk \
    && tar -xzf /tmp/jre-minimal.tar.gz -C /usr/local/jdk --strip-components=1 \
    && chown -R ezs:ezs /usr/local/jdk \
    && rm /tmp/jre-minimal.tar.gz

# Add executables from the build context (the 'deps' dir).
# The "deps/" prefix is NOT needed here.
ADD $TARGETARCH/bin/* /sbin

# Add shell and environment configurations.
RUN echo "alias ll='ls -l'" >> /root/.bashrc \
    && cp -rf /root/.bash* /app \
    && chown ezs:ezs /app/.bash*

# Add system configuration files from the build context.
ADD etc/ezs.sh /etc/profile.d
ADD etc/limits.conf /etc/security
ADD etc/70-infini.conf /etc/sysctl.d

# Add custom OS initialization script and run it.
COPY initOS.sh /tmp
RUN chmod 755 /tmp/initOS.sh \
    && /tmp/initOS.sh --from almalinux

# Update journald configuration.
COPY etc/journald.conf /tmp
RUN cat /tmp/journald.conf >> /etc/systemd/journald.conf

# --- Cleanup ---
# This section aggressively removes files and packages not needed in the final runtime image
# to minimize its size.
RUN dnf clean all \
    && dnf autoremove \
    && rm -rf /var/cache/dnf \
    && rm -rf /etc/yum.repos.d/*.repo \
    && rpm -e yum dnf \
    && rm -rf /usr/lib/.build-id \
    && find /var/log -type f -delete \
    && find / -name "rpm" -print0 | xargs -0 -I {} echo "rm -rf {}" >> /tmp/del.sh \
    && find / -name "dnf" -print0 | xargs -0 -I {} echo "rm -rf {}" >> /tmp/del.sh \
    && find / -name "yum" -print0 | xargs -0 -I {} echo "rm -rf {}" >> /tmp/del.sh \
    && chmod 755 /tmp/del.sh \
    && /tmp/del.sh \
    && rm -rf /tmp/*  \
    && find /usr/share/zoneinfo -type f ! -name 'UTC' ! -name 'GMT' ! -name 'UCT' ! -name 'Universal' ! -name 'Zulu' -delete \
    && find /usr/share/zoneinfo -type d -empty -delete

# Remove unnecessary systemd units to further reduce size.
RUN find /etc/systemd/system \
/lib/systemd/system \
/usr/lib/systemd/system \
-path '*.wants/*' \
-not -name '*dbus*' \
-not -name '*journald*' \
-not -name '*systemd-tmpfiles*' \
-not -name '*systemd-user-sessions*' \
-exec rm -rvf {} \;


# =========================================================================
# Stage 3: prod
# Purpose: Create the final, minimal production image from scratch.
# =========================================================================
FROM scratch AS prod

# Add metadata labels to the image.
LABEL description="A custom linux OS from almalinux with a custom JRE."
LABEL maintainer="Medcl„ÄÅHardy@INFINILabs <luohf@infinilabs.com>"

# Copy the entire root filesystem from the 'builder' stage.
COPY --from=builder / /

# Set the default working directory.
WORKDIR /

# Set the default command to run when a container is started.
CMD ["/bin/bash"]