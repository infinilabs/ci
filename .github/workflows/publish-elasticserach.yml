name: Publish Elasticsearch Docker 

defaults:
  run:
    shell: bash

env:
  DNAME: agent
  PNAME: elasticsearch
  TZ: Asia/Shanghai
  PUBLISH_RELEASE: "TRUE"
  RELEASE_URL: ${{ vars.RELEASE_URL }}
  JAVA_DISTRIBUTION: ${{ vars.JAVA_DISTRIBUTION }}
  JAVA_VERSION: ${{ vars.JAVA_VERSION }}
  ZULU_JAVA_VERSION: ${{ vars.ZULU_JAVA_VERSION }}

on:
  workflow_dispatch:
    inputs:
      PUBLISH_VERSION:
        description: 'Publish Version'
        type: choice
        options:
          - "7.10.0"
          - "7.10.2"
        required: true
        default: "7.10.2"
      PUBLISH_AGENT_VERSION:
        description: 'Publish With Agent Version'
        required: true
        default: "1.29.8"

jobs:
  publish:
    name: Publish elasticsearch files and docker
    runs-on: ubuntu-latest
    env:
      PUBLISH_VERSION: ${{ inputs.PUBLISH_VERSION || vars.EASYSEARCH_PUBLISH_VERSION }}
      AGENT_VERSION: ${{ inputs.PUBLISH_AGENT_VERSION || vars.PUBLISH_VERSION }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup bootstrap
        uses: ./containers/bootstrap
        
      - name: Set up and check env
        run: |
          mkdir -p $GITHUB_WORKSPACE/{dest,jdks}
          if [[ "${{ env.AGENT_VERSION }}" =~ ^([0-9]+\.[0-9]+\.[0-9]+)$ ]]; then
            AGENT_VERSION=$(curl $RELEASE_URL/.latest |jq -r ".${DNAME}")
          fi
          echo "AGENT_VERSION=$AGENT_VERSION" >> $GITHUB_ENV

      - name: Set up java toolchain
        uses: actions/setup-java@v4
        with:
          distribution: ${{ env.JAVA_DISTRIBUTION }}
          java-version: ${{ env.JAVA_VERSION }}

      - name: Repackage and bundle for publish with ${{ env.PUBLISH_VERSION}}
        run: |
          IFS=- read -r DYNAMIC_VERSION DYNAMIC_BUILD_NUMBER <<< "$PUBLISH_VERSION"
          DYNAMIC_BUILD_DATE=$(date '+%Y-%m-%d %H:%M:%S')

          export VERSION=$DYNAMIC_VERSION
          export BUILD_NUMBER=$DYNAMIC_BUILD_NUMBER
          export BUILD_DATE=$DYNAMIC_BUILD_DATE
          
          echo VERSION=$DYNAMIC_VERSION >> $GITHUB_ENV
          echo BUILD_NUMBER=$DYNAMIC_BUILD_NUMBER >> $GITHUB_ENV
          cat $GITHUB_ENV

          echo "Build $PNAME with [ VERSION $VERSION | BUILD_NUMBER $BUILD_NUMBER ] at $BUILD_DATE"

      - name: Build for docker version ${{ env.VERSION }}-${{ env.BUILD_NUMBER }} with agent version ${{ env.AGENT_VERSION }}
        run: |
          echo "Build docker for $PNAME start..."
          #prepare docker build
          chmod 755 $GITHUB_WORKSPACE/products/$PNAME/build-docker.sh
          EZS_VER=$VERSION-$BUILD_NUMBER $GITHUB_WORKSPACE/products/$PNAME/build-docker.sh

      - name: Set up qemu
        uses: docker/setup-qemu-action@v3

      - name: Set up docker buildx
        uses: docker/setup-buildx-action@v3
        #with:
        #  buildkitd-flags: --debug

      - name: Login to dockerhub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Docker build meta with ${{ env.PNAME }}
        id: tags
        run: |
          echo REPO_NAME=${{ vars.DOCKER_REPO }}/$PNAME >> $GITHUB_ENV
          echo "RELEASE_TAG=${{ vars.DOCKER_REPO }}/$PNAME:${{ env.VERSION }}" >> "$GITHUB_OUTPUT"

      - name: Docker Build and push with ${{ env.VERSION }}-${{ env.BUILD_NUMBER }}
        uses: docker/build-push-action@v6
        with:
          context: ${{ github.workspace }}/products/${{ env.PNAME }}
          file: ${{ github.workspace }}/products/${{ env.PNAME }}/Dockerfile
          target: prod
          platforms: |
            linux/amd64
            linux/arm64
          tags: |
            ${{ env.REPO_NAME }}:${{ env.VERSION }}-${{ env.BUILD_NUMBER }}
            ${{ steps.tags.outputs.RELEASE_TAG }}
          push: true
          provenance: false
          #no-cache: true

  notify_on_failure:
    runs-on: ubuntu-latest
    needs: [publish]
    if: failure()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Send Feishu Notification on Failure
        env:
          FEISHU_BOT_URL: ${{ secrets.FEISHU_BOT_WEBHOOK_URL }}
          REPO_NAME: ${{ github.repository }}
          WORKFLOW_NAME: ${{ github.workflow }}
          RUN_ID: ${{ github.run_id }}
          ACTOR: ${{ github.triggering_actor }}
          SERVER_URL: ${{ github.server_url }}
        run: $GITHUB_WORKSPACE/scripts/feishu_message.sh
