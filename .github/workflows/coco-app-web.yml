name: Publish Coco App Search Chat to NPM 
defaults:
  run:
    shell: bash
env:
  CI: false
  REPO-NAME: "coco-app"
  NODEJS_VERSION: 20
  NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

on:
  workflow_dispatch:
    inputs:
      PUBLISH_VERSION:
        description: 'Publish NPM Version'
        required: true
        default: "1.2.5"
        
jobs:
  build-web:
    env:
      PUBLISH_VERSION: ${{ inputs.PUBLISH_VERSION  }}
      VITE_LOG_LEVEL: 'warn'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Checkout coco app repository
        uses: actions/checkout@v4
        with: 
          repository: ${{ vars.GIT_REPO }}/${{ env.REPO-NAME }}
          ref: main
          path: ${{ env.REPO-NAME }}

      - name: Set version for search-chat
        working-directory: ${{ env.REPO-NAME }}
        shell: bash
        run: |
          current_version=$PUBLISH_VERSION
          if [[ -z "$current_version" ]]; then
            echo "PUBLISH_VERSION is not set or is empty." >&2
            exit 1
          fi

          # Extract x.y.z using a regular expression
          if [[ -n "$PUBLISH_VERSION" ]]; then
            if [[ "$PUBLISH_VERSION" =~ ^([0-9]+\.[0-9]+\.[0-9]+$) ]]; then
              current_version="${BASH_REMATCH[1]}"
            else
              echo "Error: Invalid version string format. Expected X.Y.Z." >&2
              exit 1
            fi
          fi

          version="$current_version"
          sed -i -e "s/version: *\"[^\"]*\"/version: \"$version\"/" tsup.config.ts
          # Extract the build number from the version string
          grep -oP "version: *\"[^\"]*\"" tsup.config.ts
          
          echo "VERSION=$version" >> $GITHUB_ENV
      
      - name: Enable Web Adapter
        working-directory: ${{ env.REPO-NAME }}
        run: |
          TARGET_FILE="src/utils/platformAdapter.ts"
          # Enable Web Adapter and disable Tauri Adapter
          sed -i 's|^\s*//\(\s*.*Web.*\)| \1|g; s|^\s*\([^/].*Tauri.*\)|//\1|g' "$TARGET_FILE"
          cat "$TARGET_FILE"

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODEJS_VERSION }}
          registry-url: 'https://registry.npmjs.org'

      - uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Sync node version and setup cache
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODEJS_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: "**/pnpm-lock.yaml"

      - name: Install app dependencies and build web
        working-directory: ${{ env.REPO-NAME }}
        run: pnpm install

      - name: Build app with ${{ env.VERSION }}
        working-directory: ${{ env.REPO-NAME }}
        env:
          NODE_OPTIONS: "--max_old_space_size=8192"
        run: |
          pnpm run build:web && cd out/search-chat && npm publish --access public

  notify_on_failure:
    runs-on: ubuntu-latest
    needs: [build-web]
    if: failure()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Send Feishu Notification on Failure
        env:
          FEISHU_BOT_URL: ${{ secrets.FEISHU_BOT_WEBHOOK_URL }}
          REPO_NAME: ${{ github.repository }}
          WORKFLOW_NAME: ${{ github.workflow }}
          RUN_ID: ${{ github.run_id }}
          ACTOR: ${{ github.triggering_actor }}
          SERVER_URL: ${{ github.server_url }}
        run: $GITHUB_WORKSPACE/scripts/feishu_message.sh