name: Test Gateway cases
defaults:
  run:
    shell: bash
env:
  CI: true
  TZ: Asia/Shanghai
  GO_VERSION: ${{ vars.GO_VERSION }}
  NODEJS_VERSION: ${{ vars.NODEJS_VERSION }}
  JAVA_DISTRIBUTION: ${{ vars.JAVA_DISTRIBUTION_GRAAVM }}
  JAVA_VERSION: ${{ vars.JAVA_VERSION_21 }}
  EZS_VERSION: ${{ inputs.EZS_VERSION }}
  PRODUCT_VERSION: ${{ inputs.PRODUCT_VERSION }}
  RELEASE_URL: ${{ vars.RELEASE_URL }}
on:
  schedule:
    - cron: '30 18 * * *'
  workflow_dispatch:
    inputs:
      EZS_VERSION:
        description: 'Easysearch Version'
        required: false
        type: string
        default: '1.14.0'
      PRODUCT_VERSION:
        description: 'Products Version'
        required: false
        type: string
        default: '1.29.8'
      RUN_INSTALL_TEST:
        description: 'Run Products Install Test?'
        required: false
        type: boolean
        default: false
      RUN_COMPILE_TEST:
        description: 'Run Products Compile Test?'
        required: false
        type: boolean
        default: true
jobs:
  compile-test:
    if: ${{ github.event_name != 'workflow_dispatch' || (github.event.inputs && inputs.RUN_COMPILE_TEST) }}
    runs-on: ubuntu-latest
    steps:
    - name: Init env
      run: |
        export WORKBASE=$HOME/go/src
        export WORK=$WORKBASE/infini.sh

        echo WORKBASE=$WORKBASE >> $GITHUB_ENV
        echo WORK=$WORK >> $GITHUB_ENV
        echo ES_USERNAME=admin >> $GITHUB_ENV
        echo ES_PASSWORD=OOUkdUwGnYIB35VMJCXmzQ== >> $GITHUB_ENV
        echo EASYSEARCH_INITIAL_ADMIN_PASSWORD=OOUkdUwGnYIB35VMJCXmzQ== >> $GITHUB_ENV
        echo ES_ENDPOINT=https://127.0.0.1:9200 >> $GITHUB_ENV
        echo GW_ENDPOINT=https://127.0.0.1:8000 >> $GITHUB_ENV
        echo VERSION=1.0.0 >> $GITHUB_ENV
        echo BUILD_NUMBER=$(date +%Y%m%d) >> $GITHUB_ENV
        echo EOF=$(date -d "$(date +%Y)-12-31 +1 day -1 day" +%Y-%m-%d) >> $GITHUB_ENV
        echo BUILD_DATE=$(date '+%Y-%m-%d %H:%M:%S') >> $GITHUB_ENV
        cat $GITHUB_ENV
    
    - name: Checkout current repository
      uses: actions/checkout@v4

    - name: Setup bootstrap
      uses: ./containers/bootstrap
        
    - name: Checkout gateway
      uses: actions/checkout@v4
      with:
        ref: main
        repository: infinilabs/gateway
        path: gateway
        
    - name: Checkout loadgen
      uses: actions/checkout@v4
      with:
        ref: main
        repository: infinilabs/loadgen
        path: loadgen
            
    - name: Checkout framework
      uses: actions/checkout@v4
      with:
        ref: main
        repository: infinilabs/framework
        path: framework

    - name: Checkout framework-vendor
      uses: actions/checkout@v4
      with:
        ref: main
        repository: infinilabs/framework-vendor
        path: vendor

    - name: Checkout testing
      uses: actions/checkout@v4
      with:
        ref: main
        repository: infinilabs/testing
        path: testing

    - name: Set up go toolchain
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        check-latest: false
        cache: true
    - name: Check go toolchain
      run: go version

    - name: Set up java toolchain
      uses: actions/setup-java@v4
      with:
        distribution: ${{ env.JAVA_DISTRIBUTION }}
        java-version: ${{ env.JAVA_VERSION }}
    
    - name: Check java toolchain
      run: java -version && which java

    - name: Compile products code
      run: |
        mkdir -p $WORKBASE
        echo Home path is $HOME
        
        echo Check work folder $GITHUB_WORKSPACE
        ln -s $GITHUB_WORKSPACE $WORK
        ls -al $WORK/
        
        # for products
        for p in gateway loadgen; do
          cd $WORK/$p && echo Compiling $p at $PWD ...
          OFFLINE_BUILD=true GOMODULE=false make build
        done

    - name: Check compiled products
      run: |
        echo Check compiled products
        mkdir -p $WORK/bin
        for p in gateway loadgen; do
          cd $WORK/$p && cp -rf $WORK/$p/bin/* $WORK/bin
        done

    - name: Run easysearch docker
      run: |
        VER=$(curl "$RELEASE_URL/.latest" |sed 's/",/"/;s/"//g;s/://1' |grep -Ev '^[{}]' |grep "easysearch" |awk '{print $NF}')
        echo "The latest easysearch version is $VER"
        if [[ "$EZS_VERSION" != "$VER" ]] && [[ -n "$EZS_VERSION" ]]; then
          if [[ "$EZS_VERSION" =~ '^[0-9]+\.[0-9]+\.[0-9]+-[0-9]+$' ]]; then
            VER=$EZS_VERSION
          else
            echo "EZS_VERSION does not match x.y.z-build_number pattern, skipping assignment."
          fi
        fi
        echo "Using easysearch docker image with $VER ..."
        sudo mkdir -p $HOME/easysearch/{data,logs} && sudo chown -R 602:602 $HOME/easysearch && sudo chmod -R 777 "$HOME/easysearch"
        docker pull infinilabs/easysearch:$VER
        docker run -d --name easysearch \
          --network host \
          -p 9200:9200 -p 9300:9300 \
          -e cluster.name=easysearch \
          -e "JAVA_OPTS=-Xms2g -Xmx2g" \
          -e EASYSEARCH_INITIAL_ADMIN_PASSWORD=$EASYSEARCH_INITIAL_ADMIN_PASSWORD \
          -e METRICS_WITH_AGENT=true \
          -e METRICS_CONFIG_SERVER=http://127.0.0.1:9000 \
          -v $HOME/easysearch/logs:/app/easysearch/logs \
          -v $HOME/easysearch/data:/app/easysearch/data \
          infinilabs/easysearch:$VER
        # Wait for easysearch to start
        sleep 60