name: Products Release Notes and Tag
defaults:
  run:
    shell: bash
env:
  TOKEN: ${{ secrets.X_TOKEN }}
  RELEASE_URL: ${{ vars.RELEASE_URL }}
  SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
  SSH_CONFIG: ${{ secrets.SSH_CONFIG }}
  LOCAL_PORT: ${{ vars.LOCAL_PORT }}
  OSS_EP: ${{ secrets.OSS_EP }}
  OSS_AK: ${{ secrets.OSS_AK }}
  OSS_SK: ${{ secrets.OSS_SK }}
  OSS_BK: ${{ secrets.OSS_BK }}
  OSS_MODE: ${{ secrets.OSS_MODE }}
  CONNECT_SERVER: ${{ secrets.CONNECT_SERVER }}
  CONNECT_PORT: ${{ secrets.CONNECT_PORT }}
  CONNECT_KEY: ${{ secrets.CONNECT_KEY }}
  CONNECT_TIMEOUT: ${{ vars.CONNECT_TIMEOUT }}
  CONNECT_MODE: ${{ vars.CONNECT_MODE }}
  CONNECT_METHOD: ${{ secrets.CONNECT_METHOD }}
  PUBLISH_VERSION: ${{ inputs.PUBLISH_VERSION || vars.PUBLISH_VERSION }}
  
on:
  workflow_dispatch:
    inputs:
      OPERATION:
        description: 'Create PR/TAG'
        required: true
        type: choice
        options: ['PR', 'TAG', 'RELEASE']
        default: "PR"
      PUBLISH_FRAMEWORK_VERSION:
          description: 'Publish Framework Version'
          required: false
          default: "1.1.6" 
      PUBLISH_VERSION:
        description: 'Publish Release Version'
        required: false
        default: "1.29.3-2018"
      PUBLISH_EZS_VERSION:
        description: 'Publish Easysearch Version'
        required: false
        default: "1.12.1-2018"
      PUBLISH_COCO_APP_VERSION:
        description: 'Publish Coco App Version'
        required: false
        default: "0.4.0-2018"
      PUBLISH_COCO_VERSION:
        description: 'Publish Coco Server Version'
        required: false
        default: "0.4.0-2018"
      PRODUCTS_PUBLISH:
        description: 'Products with agent/console...'
        required: false
        type: boolean
        default: true
      COCO_PUBLISH:
        description: 'Products with coco app/server...'
        required: false
        type: boolean
        default: true
      EASYSEARCH_PUBLISH:
        description: 'Easysearch'
        required: false
        type: boolean
        default: true

jobs:
  generate-matrix: 
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.gen-matrix.outputs.matrix }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Generate matrix
        id: gen-matrix
        env:
            AGENT_PUBLISH: ${{ inputs.PRODUCTS_PUBLISH }}
            CONSOLE_PUBLISH: ${{ inputs.PRODUCTS_PUBLISH }}
            GATEWAY_PUBLISH: ${{ inputs.PRODUCTS_PUBLISH }}
            LOADGEN_PUBLISH: ${{ inputs.PRODUCTS_PUBLISH }}
            FRAMEWORK_PUBLISH: ${{ inputs.PRODUCTS_PUBLISH }}
            EASYSEARCH_PUBLISH: ${{ inputs.EASYSEARCH_PUBLISH }}
            COCO_APP_PUBLISH: ${{ inputs.COCO_PUBLISH }}
            COCO_SERVER_PUBLISH: ${{ inputs.COCO_PUBLISH }}
        run: |
          matrix=$($GITHUB_WORKSPACE/scripts/go-matrix.sh)
          echo "matrix=$matrix" >> "$GITHUB_OUTPUT"
          cat "$GITHUB_OUTPUT"

  publish:
    needs: generate-matrix
    name: Create ${{ inputs.OPERATION }} for ${{ matrix.product }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
    strategy:
      fail-fast: false
      max-parallel: 1
      matrix:
        include: ${{ fromJson(needs.generate-matrix.outputs.matrix) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up and check env for ${{ matrix.product }}
        run: |
          $GITHUB_WORKSPACE/scripts/env-init.sh
          if [[ "${{ matrix.product }}" == "framework" ]]; then
            VERSION=${{ inputs.PUBLISH_FRAMEWORK_VERSION }}
            if [[ -z "$VERSION" ]]; then
              echo "Please input the framework version"
              exit 1
            fi
          elif [[ "${{ matrix.product }}" == "easysearch" ]]; then
            EZS_VER=${{ inputs.PUBLISH_EZS_VERSION }}
            if [[ -z "$EZS_VER" ]]; then
              echo "Please input the easysearch version"
              exit 1
            fi
            VER=${{ env.PUBLISH_VERSION }}
            if [[ -z "$VER" ]] || [[ -z "$EZS_VER" ]]; then
              echo "Please input the publish version and easysearch version"
              exit 1
            fi
            SUFFIX=${VER#*-}
            if [[ "$VER" == *"-"* ]] && [[ "$EZS_VER" != *"-"* ]] && [[ -n "$SUFFIX" ]]; then
              VERSION="${EZS_VER}-$SUFFIX"
            else
              VERSION=$EZS_VER
            fi
          elif [[ "${{ matrix.product }}" == "coco-app" ]]; then
            VERSION=${{ inputs.PUBLISH_COCO_APP_VERSION }}
            if [[ -z "$VERSION" ]]; then
              echo "Please input the framework version"
              exit 1
            fi
          elif [[ "${{ matrix.product }}" == "coco-server" ]]; then
            VERSION=${{ inputs.PUBLISH_COCO_VERSION }}
            if [[ -z "$VERSION" ]]; then
              echo "Please input the framework version"
              exit 1
            fi
          else
            VERSION=${{ env.PUBLISH_VERSION }}
          fi
          
          if [[ "${{ inputs.OPERATION }}" == "PR" ]]; then
            PR_BRANCH="ci_release_$VERSION"
            PR_MESSAGE="chore: update release notes for publish $VERSION"
            echo "PR_BRANCH=$PR_BRANCH" >> $GITHUB_ENV
            echo "PR_MESSAGE=$PR_MESSAGE" >> $GITHUB_ENV
          fi
          echo "PNAME=${{ matrix.product }}" >> $GITHUB_ENV
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          cat $GITHUB_ENV

      - name: Run connect in background
        if: ${{ matrix.product == 'easysearch' && inputs.OPERATION != 'RELEASE' }}
        run: |
          connect -c "$GITHUB_WORKSPACE/.oss.json" >/dev/null 2>&1 &
          echo "Connect started with pid $!"
          sleep 15

      - name: Release latest version
        if: ${{ inputs.OPERATION == 'RELEASE' }}
        env:
          GH_TOKEN: ${{ secrets.REPO_PAT }}
        run: |
          VER=${{ inputs.PUBLISH_VERSION }}
          EZS_VER=${{ inputs.PUBLISH_EZS_VERSION }}
          COCO_APP_VER=${{ inputs.PUBLISH_COCO_APP_VERSION }}
          COCO_VER=${{ inputs.PUBLISH_COCO_VERSION }}
          if [[ -z "$VER" ]] || [[ -z "$EZS_VER" ]] || [[ -z "$COCO_APP_VER" ]] || [[ -z "$COCO_VER" ]]; then
            echo "Please input the publish version, easysearch version, coco app version and coco version"
            exit 1
          fi
          SUFFIX=${VER#*-}
          if [[ "$VER" == *"-"* ]] && [[ "$EZS_VER" != *"-"* ]] && [[ -n "$SUFFIX" ]]; then
            EZS_VER="${EZS_VER}-$SUFFIX"
          fi
          #check if the version is correct
          if [[ "$VER" == *"-"* ]] && [[ "$COCO_APP_VER" != *"-"* ]] && [[ -n "$SUFFIX" ]]; then
            COCO_APP_VER="${COCO_APP_VER}-$SUFFIX"
          fi
          if [[ "$VER" == *"-"* ]] && [[ "$COCO_VER" != *"-"* ]] && [[ -n "$SUFFIX" ]]; then
            COCO_VER="${COCO_VER}-$SUFFIX"
          fi
          fname=".latest"
          echo "Products publish version: $VER, Easysearch version: $EZS_VER"
          wget -q -nc --show-progress --progress=bar:force:noscroll $RELEASE_URL/$fname -P /tmp
          jq --arg publish_version "$VER" \
            --arg easysearch_version "$EZS_VER" \
            --arg coco_app_version "$COCO_APP_VER" \
            --arg coco_version "$COCO_VER" \
            '.console=$publish_version | .gateway=$publish_version | .agent=$publish_version | ."coco-app"=$coco_app_version | ."coco-server"=$coco_version | .easysearch=$easysearch_version | .loadgen=$publish_version' \
            "/tmp/$fname" > $GITHUB_WORKSPACE/$fname

          # check if the file is the same
          if $GITHUB_WORKSPACE/scripts/version_compare "/tmp/$fname" "$GITHUB_WORKSPACE/$fname"; then
            echo "Files are the same, no need to upload."
          else
            echo "Files are different, uploading..."
            oss upload -c $GITHUB_WORKSPACE/.oss.yml -o -f $GITHUB_WORKSPACE/$fname
            # Reset cache
            curl -s -H "X-Token: $TOKEN" "$RELEASE_URL/_flush?versions=$COCO_APP_VER,$COCO_VER,$EZS_VER,$VER" > /dev/null
            # check if the cache is reset
            sleep 120
            curl -s -H 'x-reset-cache: true' "$RELEASE_URL/$fname"
            # set actions variables
            echo "Set actions variables with publish version: $VER, Easysearch version: $EZS_VER"
            gh variable set PUBLISH_VERSION --body "$VER"
            gh variable set EASYSEARCH_PUBLISH_VERSION --body "$EZS_VER"
            gh variable set COCO_APP_PUBLISH_VERSION --body "$COCO_APP_VER"
            gh variable set COCO_PUBLISH_VERSION --body "$COCO_VER"
          fi

          # coco website publish
          git clone ${{ vars.GIT_SSH_REPO }}/coco-website $GITHUB_WORKSPACE/coco-website
          cd $GITHUB_WORKSPACE/coco-website
          git config user.name github-actions
          git config user.email github-actions@github.com
          echo "Check tag and create tag for coco-website"
          PVER=$(echo "v$COCO_VER" | sed 's/-.*//')
          tag_exists=$(git rev-parse --verify "refs/tags/$PVER" 2>/dev/null && echo true || echo false)
          if [[ "$tag_exists" == "false" ]]; then
            git tag -a $PVER -m "Release $PVER"
            git push origin $PVER
            echo "Tag $PVER created for coco-website"
            sleep 60 #wait for 1 minute to make sure the tag is created
          else
            echo "Tag $PVER already exists for coco-website"
          fi
          
      - name: Checkout code for ${{ matrix.product }}
        if: ${{ inputs.OPERATION == 'PR'}}
        timeout-minutes: 30
        run: |
          if [[ "${{ matrix.product }}" == "easysearch" ]]; then
            git clone ${{ secrets.SSH_GIT_REPO }}/${{ matrix.product }} $GITHUB_WORKSPACE/${{ matrix.product }}
          else
            git clone ${{ vars.GIT_SSH_REPO }}/${{ matrix.product }} $GITHUB_WORKSPACE/${{ matrix.product }}
          fi
          # Set up git
          cd $GITHUB_WORKSPACE/${{ matrix.product }} && echo Checkout $PNAME repo $(git log -1 --pretty=format:"%h, %ad, %an, %s")
          git config user.name github-actions
          git config user.email github-actions@github.com

      - name: Checkout and create tag for ${{ matrix.product }}
        if: ${{ inputs.OPERATION == 'TAG'}}
        run: |
          if [[ "${{ matrix.product }}" == "easysearch" ]]; then
            git clone ${{ secrets.SSH_GIT_REPO }}/${{ matrix.product }} $GITHUB_WORKSPACE/${{ matrix.product }}
          else
            git clone ${{ vars.GIT_SSH_REPO }}/${{ matrix.product }} $GITHUB_WORKSPACE/${{ matrix.product }}
          fi
          cd $GITHUB_WORKSPACE/${{ matrix.product }}
          git config user.name github-actions
          git config user.email github-actions@github.com
          echo "Check tag and create tag for ${{ matrix.product }}"
          PVER=$(echo "v$VERSION" | sed 's/-.*//')
          tag_exists=$(git rev-parse --verify "refs/tags/$PVER" 2>/dev/null && echo true || echo false)
          if [[ "$tag_exists" == "false" ]]; then
            git tag -a $PVER -m "Release $PVER"
            git push origin $PVER
            echo "Tag $PVER created for ${{ matrix.product }}"
            sleep 60 #wait for 1 minute to make sure the tag is created
          else
            echo "Tag $PVER already exists for ${{ matrix.product }}"
          fi

      - name: Create Branch and update release notes & data for ${{ matrix.product }}
        if: ${{ inputs.OPERATION == 'PR' }}
        run: |
          cd $GITHUB_WORKSPACE/${{ matrix.product }}
          echo "Create Branch $PR_BRANCH for ${{ matrix.product }}"
          git checkout -b "$PR_BRANCH"
          #update release notes
          PUBLISH="$(echo "$VERSION" | sed 's/-.*//') ($(date +'%Y-%m-%d'))"
          for f in en zh; do
            if [[ ! -d docs/content.$f ]]; then
              continue
            fi
            if ! grep -wq "$(echo "$VERSION" | sed 's/-.*//')" docs/content.$f/docs/release-notes/_index.md; then
              sed -i "s/## Latest.*/## $PUBLISH/" docs/content.$f/docs/release-notes/_index.md
              sed -i -e "/^## $PUBLISH/i ## Latest (In development)  \\n### ❌ Breaking changes  \\n### 🚀 Features  \\n### 🐛 Bug fix  \\n### ✈️ Improvements  \\n" docs/content.$f/docs/release-notes/_index.md
              git add docs/content.$f/docs/release-notes/_index.md
            fi
          done
          # udpate version
          if [[ -d docs/data ]]; then
            sed -i "s/version:.*/version: '$VERSION',/" docs/data/quick_start.yaml
            if [[ "${{ matrix.product }}" == "easysearch" ]]; then
              sed -i "19s/version:.*/version: '$PUBLISH_VERSION'/" docs/data/quick_start.yaml
            fi
            git add docs/data/quick_start.yaml
          fi

      - name: Create Commit Message for ${{ matrix.product }}
        if: ${{ inputs.OPERATION == 'PR' }}
        run: |
          cd $GITHUB_WORKSPACE/${{ matrix.product }}
          git commit -m "$PR_MESSAGE"     
          git push origin "$PR_BRANCH"
          if [[ "${{ matrix.product }}" == "easysearch" ]]; then
            git remote set-url origin https://${{ secrets.HTTP_GIT_REPO }}/infini/${{ matrix.product }}
          fi

      - name: Create Github Pull Request for ${{ matrix.product }}
        if: ${{ inputs.OPERATION == 'PR' && matrix.product != 'easysearch' }}
        env:
          GH_TOKEN: ${{ secrets.REPO_PAT }} 
        run: |
          cd $GITHUB_WORKSPACE/${{ matrix.product }}
          # Check if the branch already exists
          if git ls-remote --heads origin "$PR_BRANCH" | grep -q "$PR_BRANCH"; then
            echo "Branch $PR_BRANCH found. Deleting remote branch..."
            git push origin --delete "$PR_BRANCH"
            echo "Branch $BRANCH_NAME deleted."
          fi
          gh pr create --title "$PR_MESSAGE" \
                  --body "This PR create by `github action` to updates the release notes." \
                  --base main \
                  --head "$PR_BRANCH" \
                  --label "auto-merge" \
                  --label "automated"

      - name: Create Pull Request for ${{ matrix.product }}
        if: ${{ inputs.OPERATION == 'PR' && matrix.product == 'easysearch' }}
        uses: infinilabs/gitea-pr@v0
        env:
          https_proxy: http://${{ vars.LOCAL_HOST }}:${{ vars.LOCAL_PORT }}
        with:
          url: https://${{ secrets.HTTP_GIT_REPO}}
          token: ${{ secrets.GITEA_TOKEN }}
          path: ${{ env.PNAME }}
          base: main
          branch: ${{ env.PR_BRANCH}}
          assignee : hardy
          tea-version: 0.9.2
          pr-label: "auto-merge, automated"

  notify_on_failure:
    runs-on: ubuntu-latest
    needs: [publish]
    if: failure()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Send Feishu Notification on Failure
        env:
          FEISHU_BOT_URL: ${{ secrets.FEISHU_BOT_WEBHOOK_URL }}
          REPO_NAME: ${{ github.repository }}
          WORKFLOW_NAME: ${{ github.workflow }}
          RUN_ID: ${{ github.run_id }}
          ACTOR: ${{ github.triggering_actor }}
          SERVER_URL: ${{ github.server_url }}
        run: $GITHUB_WORKSPACE/scripts/feishu_message.sh