name: Test Environment Setup (Dry-Run)
defaults:
  run:
    shell: bash
env:
  TZ: Asia/Shanghai
  PNAME: cloud
  GO_VERSION: ${{ vars.GO_VERSION }}
  NODEJS_VERSION: ${{ vars.NODEJS_VERSION }}
  PRE_RELEASE: ${{ vars.PRE_RELEASE }}
  RELEASE_URL: ${{ vars.RELEASE_URL }}
  SSH_GIT_REPO: ${{ secrets.SSH_GIT_REPO }}
  SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
  SSH_CONFIG: ${{ secrets.SSH_CONFIG }}
  OSS_EP: ${{ secrets.OSS_EP }}
  OSS_AK: ${{ secrets.OSS_AK }}
  OSS_SK: ${{ secrets.OSS_SK }}
  OSS_BK: ${{ secrets.OSS_BK }}
  OSS_MODE: ${{ secrets.OSS_MODE }}
  LOCAL_HOST: ${{ secrets.LOCAL_HOST }}
  LOCAL_PORT: ${{ secrets.LOCAL_PORT }}
  CONNECT_SERVER: ${{ secrets.CONNECT_SERVER }}
  CONNECT_PORT: ${{ secrets.CONNECT_PORT }}
  CONNECT_KEY: ${{ secrets.CONNECT_KEY }}
  CONNECT_TIMEOUT: ${{ vars.CONNECT_TIMEOUT }}
  CONNECT_MODE: ${{ vars.CONNECT_MODE }}
  CONNECT_METHOD: ${{ secrets.CONNECT_METHOD }}

on:
  workflow_dispatch:
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup bootstrap
        uses: ./containers/bootstrap

      - name: Set up and check env
        run: |
          git config --global fetch.progress false
          git config --global user.name "GitHub Actions"
          git config --global user.email "ci@github.com"

      - name: Run connect in background
        run: |
          connect -c "$GITHUB_WORKSPACE/.oss.json" >/dev/null 2>&1 &
          echo "Connect started with pid $!"
          sleep 5

      - name: Setup ${{ env.PNAME }} env
        run: |
          source $GITHUB_WORKSPACE/scripts/go-init.sh
          if [[ "$(echo "${{ vars.PRE_RELEASE }}" | tr '[:upper:]' '[:lower:]')" == "true" ]]; then
            grep -wq "pre" $GITHUB_WORKSPACE/.oss.yml || echo "pre: true" >> $GITHUB_WORKSPACE/.oss.yml
          fi
          echo WORK=$WORK >> $GITHUB_ENV
          echo WORKBASE=$WORKBASE >> $GITHUB_ENV
          echo PNAME=${{ env.PNAME }} >> $GITHUB_ENV
          echo PATH=$PATH:$GITHUB_WORKSPACE/tools >> $GITHUB_ENV

      - name: Clone Repository
        run: |
          echo "License repo cloning to $GITHUB_WORKSPACE/license"
          git clone --quiet git@github.com:infinilabs/license $GITHUB_WORKSPACE/license
          cd $GITHUB_WORKSPACE/license && echo Checkout license repo $(git log -1 --pretty=format:"%h, %ad" --date=iso)
          echo ".............................."
          
          echo "Pizza repo cloning to $GITHUB_WORKSPACE/pizza"
          git clone --quiet --depth 1 git@github.com:infinilabs/pizza $GITHUB_WORKSPACE/pizza
          cd $GITHUB_WORKSPACE/pizza && echo Checkout pizza repo $(git log -1 --pretty=format:"%h, %ad" --date=iso)
          echo ".............................."

          echo "Pizza repo cloning to $GITHUB_WORKSPACE/pizza"
          git clone --quiet --depth 1 ssh://git@ssh.github.com:443/infinilabs/pizza $GITHUB_WORKSPACE/pizza-https
          cd $GITHUB_WORKSPACE/pizza && echo Checkout pizza repo $(git log -1 --pretty=format:"%h, %ad" --date=iso)
          echo ".............................."

          echo "$PNAME repo cloning to $GITHUB_WORKSPACE/$PNAME"
          git clone --quiet --depth 1 $SSH_GIT_REPO/$PNAME $GITHUB_WORKSPACE/$PNAME
          cd $GITHUB_WORKSPACE/$PNAME && echo Checkout $PNAME repo $(git log -1 --pretty=format:"%h, %ad" --date=iso)
          echo ".............................."

  test-on-windows-with-checkout:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Checkout private pizza repository
        uses: actions/checkout@v4
        with:
          repository: 'infinilabs/pizza'
          ssh-key: ${{ secrets.SSH_PRIVATE_KEY }}
          path: pizza

      - name: Checkout coco repository
        uses: actions/checkout@v4
        with:
          repository: 'infinilabs/coco-app'
          path: coco-app
      
      - name: Check the path files
        run: |
          echo "Current working directory: $(pwd)"
          echo "Files in current directory:"
          ls -la

      - name: Set up and check env
        working-directory: coco-app
        run: |
          PACKAGE_VERSION=$(jq -r '.version' package.json)
          CARGO_VERSION=$(grep -m 1 '^version =' src-tauri/Cargo.toml | sed -E 's/.*"([^"]+)".*/\1/')
          if [ "$PACKAGE_VERSION" != "$CARGO_VERSION" ]; then
            echo "::error::Version mismatch!"
          else
            echo "Version match: $PACKAGE_VERSION"
          fi