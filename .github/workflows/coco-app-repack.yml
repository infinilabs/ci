name: Coco App Release Repackage

defaults:
  run:
    shell: bash
env:
  PNAME: coco/app
  GO_VERSION: ${{ vars.GO_VERSION }}
  NODEJS_VERSION: ${{ vars.NODEJS_VERSION }}
  PRE_RELEASE: ${{ vars.PRE_RELEASE }}
  RELEASE_URL: ${{ vars.RELEASE_URL }}
  GITHUB_API_RELEASES_URL: "https://api.github.com/repos/infinilabs/coco-app/releases"
  BASE_URL_PREFIX: "https://github.com/infinilabs/coco-app/releases/download"
  FILE_EXTENSIONS: '\.(dmg|deb|exe)$'
  UPGRADE_FILE_EXTENSIONS: '\.(gz|sig|AppImage|exe|json)$'

on:
  workflow_dispatch:
    inputs:
      PUBLISH_VERSION:
        description: 'Publish Release Version'
        required: true
        default: "0.4.0"
      PUBLISH_RELEASE:
        description: 'Publish Release'
        required: true
        type: boolean
        default: false

jobs:
  repackage:
    runs-on: ubuntu-latest
    env:
        OSS_EP: ${{ secrets.OSS_EP }}
        OSS_AK: ${{ secrets.OSS_AK }}
        OSS_SK: ${{ secrets.OSS_SK }}
        OSS_BK: ${{ secrets.OSS_BK }}
        OSS_MODE: ${{ secrets.OSS_MODE }}
    steps:          
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup env
        run: |
          if [[ "${{ inputs.PUBLISH_VERSION }}" =~ ^([0-9]+\.[0-9]+\.[0-9]+)-([1-9][0-9]*)$ ]]; then
            version="${BASH_REMATCH[1]}"
            build_number="${BASH_REMATCH[2]}"

            echo "VERSION=$version" >> $GITHUB_ENV
            echo "BUILD_NUMBER=$build_number" >> $GITHUB_ENV
            echo "TAG=v$version" >> $GITHUB_ENV
          else
            echo "Error: Invalid version string format. Expected X.Y.Z-BUILD_NUMBER." >&2
            exit 1
          fi
          # Setup environment
          $GITHUB_WORKSPACE/scripts/env-init.sh
          if [[ "$(echo "${{ vars.PRE_RELEASE }}" | tr '[:upper:]' '[:lower:]')" == "true" ]]; then
            grep -wq "pre" $GITHUB_WORKSPACE/.oss.yml || echo "pre: true" >> $GITHUB_WORKSPACE/.oss.yml
          fi
          echo PATH=$PATH:$GITHUB_WORKSPACE/tools >> $GITHUB_ENV

      - name: Get Release Asset Names
        run: |
          ASSET_NAMES=$(curl -sL -H "Accept: application/vnd.github.v3+json" \
            "$GITHUB_API_RELEASES_URL/tags/$TAG" | \
            jq -r '.assets[].name')
          echo "$ASSET_NAMES" > asset_names.txt
          cat asset_names.txt

      - name: Download and Install Assets
        run: |
          BASE_URL="$BASE_URL_PREFIX/$TAG"

          grep -E -i "$FILE_EXTENSIONS" asset_names.txt | while read -r filename; do
            echo "Downloading $filename ..."
            url="$BASE_URL/$filename"
            curl -sSL -o "$filename" "$url"
          done

      - name: Repackage Assets
        run: |
          set -euo pipefail

          echo "Repack VERSION: $VERSION, BUILD_NUMBER: $BUILD_NUMBER"

          declare -A FILE_MAP=(
            ["x86-setup.exe"]="windows-386.exe"
            ["x64-setup.exe"]="windows-amd64.exe"
            ["arm64-setup.exe"]="windows-arm64.exe"
            ["x64.dmg"]="mac-amd64.dmg"
            ["aarch64.dmg"]="mac-arm64.dmg"
            ["amd64.deb"]="linux-amd64.deb"
            ["aarch64.deb"]="linux-arm64.deb"
          )

          while read -r old_name; do
            base_name=$(basename "$old_name")
            extension="${base_name##*.}"
            matched=false
            for pattern in "${!FILE_MAP[@]}"; do
              if [[ "$base_name" == *"$pattern"* ]]; then
                new_suffix_with_ext="${FILE_MAP[$pattern]}"
                new_suffix=$(echo "$new_suffix_with_ext" | sed "s/\.${extension}$//")

                new_base_name="Coco-AI-${VERSION}-${BUILD_NUMBER}-${new_suffix}"
                new_name_with_ext="${new_base_name}.${extension}"

                mv "$old_name" "$new_name_with_ext"
                zip -q "$new_base_name.zip" "$new_name_with_ext"
                matched=true
                break
              fi
            done

            if [[ "$matched" == false ]]; then
                echo "Warning: No mapping found for $old_name.  Skipping." >&2
            fi
          done < <(find . -type f \( -name "*.exe" -o -name "*.dmg" -o -name "*.deb" \) | sort) 
          # List repackaged files
          echo "Repackaged files:"
          ls -lh *.zip

      - name: Download and Upgrade Assets
        run: |
          BASE_URL="$BASE_URL_PREFIX/$TAG"
          mkdir -p upgrade
          grep -E -i "$UPGRADE_FILE_EXTENSIONS" asset_names.txt | while read -r filename; do
            echo "Downloading $filename ..."
            url="$BASE_URL/$filename"
            curl -sSL -o upgrade/"$filename" "$url"
          done
      
      - name: Update the download url
        run: |
          jq --arg VER "$VERSION" \
             --arg URL "https://release.infinilabs.com/coco/app/stable/.$TAG/" \
             --arg GH_URL "https://github.com/infinilabs/coco-app/releases/download/v" \
            '
              .version = $VER |
              .platforms |= map_values(
                .url |= (
                  if startswith("\($GH_URL)\($VER)") then
                    "\($URL)\(sub("\($GH_URL)\($VER)/"; ""))"
                  else
                    .
                  end
                )
              )
            ' upgrade/latest.json > .latest.json && rm -rf upgrade/latest.json
        
      - name: Upload coco app files
        run: |
          # Upload repackaged files
          for file in *.zip; do
            oss upload -c $GITHUB_WORKSPACE/.oss.yml -o -p $PNAME -f $file
          done
          # Upload upgrade files
          find upgrade \( -name "*.AppImage" -o -name "*.sig" -o -name "*.gz" -o -name "*.exe" \) -maxdepth 1 -type f -print0 |
          while IFS= read -r -d $'\0' file; do
            oss upload -c "$GITHUB_WORKSPACE/.oss.yml" -o -p "$PNAME/.${TAG}" -f "$file"
          done
          # Upload .latest.json
          oss upload -c $GITHUB_WORKSPACE/.oss.yml -o -p $PNAME -f .latest.json