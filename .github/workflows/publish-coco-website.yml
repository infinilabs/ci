name: Publish Coco Website
defaults:
  run:
    shell: bash
env:
  TZ: Asia/Shanghai
  PNAME: coco-website
  NODEJS_VERSION: "20.19.0"

on:
  workflow_dispatch:
    inputs:
      PUBLISH_RELEASE:
        description: 'Publish Release'
        required: false
        type: boolean
        default: false

jobs:
  publish:
    name: Publish Coco Webisite
    runs-on: ubuntu-latest
    env:
        OSS_EP: ${{ secrets.OSS_EP }}
        OSS_AK: ${{ secrets.OSS_AK }}
        OSS_SK: ${{ secrets.OSS_SK }}
        OSS_BK: ${{ secrets.OSS_BK }}
        OSS_MODE: ${{ secrets.OSS_MODE }}
        LOCAL_HOST: ${{ secrets.LOCAL_HOST }}
        LOCAL_PORT: ${{ secrets.LOCAL_PORT }}
        SSH_GIT_REPO: ${{ secrets.SSH_GIT_REPO }}
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        SSH_CONFIG: ${{ secrets.SSH_CONFIG }}
        CONNECT_SERVER: ${{ secrets.CONNECT_SERVER }}
        CONNECT_PORT: ${{ secrets.CONNECT_PORT }}
        CONNECT_KEY: ${{ secrets.CONNECT_KEY }}
        CONNECT_TIMEOUT: ${{ vars.CONNECT_TIMEOUT }}
        CONNECT_MODE: ${{ vars.CONNECT_MODE }}
        CONNECT_METHOD: ${{ secrets.CONNECT_METHOD }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup bootstrap
      uses: ./containers/bootstrap

    - name: checkout coco website
      uses: actions/checkout@v4
      with:
        ref: main
        repository: infinilabs/${{ env.PNAME }}
        path: ${{ env.PNAME }}
    
    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        package_json_file: "${{ env.PNAME }}/package.json"

    - name: Setup Node
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODEJS_VERSION }}
        check-latest: false
        cache: "pnpm"
        cache-dependency-path: "${{ env.PNAME }}/pnpm-lock.yaml"
  
    - name: Update data.json with latest versions and publish dates
      working-directory: ${{ env.PNAME }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        set -e

        # --- Part 1: Fetch latest versions ---
        echo "Fetching latest version info..."
        DATA_JSON_PATH="public/data.json"
        VERSION_INFO=$(curl https://release.infinilabs.com/.latest)
        APP_FULL_VERSION=$(echo "$VERSION_INFO" | jq -r '.["coco-app"]')
        SERVER_FULL_VERSION=$(echo "$VERSION_INFO" | jq -r '.["coco-server"]')
        echo "App Version: $APP_FULL_VERSION, Server Version: $SERVER_FULL_VERSION"

        # --- Part 2: Define the optimized function to get release date ---
        # This function now uses `gh api` exclusively and a single powerful `jq` query.
        get_release_date() {
          local repo_slug="$1"
          local full_ver="$2"
          
          # Extract version parts in one go
          local xyz_part=$(echo "$full_ver" | cut -d'-' -f1)
          local xy_part=$(echo "$xyz_part" | cut -d'.' -f1,2)
          
          # Tags to try, in order of preference
          local tag1="v${xyz_part}"
          local tag2="v${xy_part}.0"

          # Fetch all releases once, then process locally with a single jq command.
          # This is much more efficient than multiple `curl` calls.
          local release_date=$(gh api --paginate "/repos/${repo_slug}/releases" | jq -r \
            --arg tag1 "$tag1" --arg tag2 "$tag2" \
            '
              # Find the release matching tag1 or tag2
              map(select(.tag_name == $tag1 or .tag_name == $tag2)) |
              # Sort by preference: tag1 comes first
              sort_by(if .tag_name == $tag1 then 0 else 1 end) |
              # Get the first matching release and its creation date
              .[0].created_at |
              # If a date was found, split and take the YYYY-MM-DD part
              if . then split("T")[0] else empty end
            '
          )

          # If no release was found, fall back to the current date
          if [[ -z "$release_date" ]]; then
            echo "$(date +%Y-%m-%d)"
          else
            echo "$release_date"
          fi
        }

        # --- Part 3: Execute and update data.json ---
        echo "Fetching release dates..."
        APP_DATE=$(get_release_date "infinilabs/coco-app" "$APP_FULL_VERSION")
        SERVER_DATE=$(get_release_date "infinilabs/coco-server" "$SERVER_FULL_VERSION")
        echo "App Publish Date: $APP_DATE, Server Publish Date: $SERVER_DATE"

        # Update the data.json file using jq in a single, clean step
        jq \
          --arg app_ver "$APP_FULL_VERSION" \
          --arg server_ver "$SERVER_FULL_VERSION" \
          --arg app_date "$APP_DATE" \
          --arg server_date "$SERVER_DATE" \
          '.app = $app_ver | .server = $server_ver | .app_publish = $app_date | .server_publish = $server_date' \
          "$DATA_JSON_PATH" > tmp.json && mv tmp.json "$DATA_JSON_PATH"

        echo -e "\nUpdated $DATA_JSON_PATH:"
        cat "$DATA_JSON_PATH"

    - name: Restore cache
      uses: actions/cache@v4
      with:
        path: |
          .next/cache
        key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock', '**/pnpm-lock.yaml') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
        restore-keys: |
          ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock', '**/pnpm-lock.yaml') }}

    - name: Install dependencies
      working-directory: ${{ env.PNAME }}
      run: pnpm install --registry=https://registry.npmjs.org --quiet

    - name: Build with Web
      working-directory: ${{ env.PNAME }}
      env:
        NODE_ENV: production
      run: pnpm build

    - name: Add CNAME file
      working-directory: ${{ env.PNAME }}
      run: echo "coco.rs" > ./docs/CNAME

    - name: Disable Jekyll
      working-directory: ${{ env.PNAME }}
      run: touch docs/.nojekyll

    - name: Create zip archive
      working-directory: ${{ env.PNAME }}
      run: |
        pwd
        ( cd docs && zip -qr ../$PNAME.zip . )
    
    - name: Run connect in background for ${{env.PNAME}}
      run: |
        connect -c "$GITHUB_WORKSPACE/.oss.json" >/dev/null 2>&1 &
        echo "Connect started with pid $!"
        sleep 15

    - name: Deploy ${{env.PNAME}}
      timeout-minutes: 30
      continue-on-error: true
      working-directory: ${{ env.PNAME }}
      run: |
        if [[ -f $PNAME.zip ]]; then
          echo "Deploying $PNAME.zip to staging at $(date +'%m-%d %H:%M:%S')"
          scp -r $PNAME.zip staging:/opt
          echo "Uploaded $PNAME to staging at $(date +'%m-%d %H:%M:%S')"
          ssh staging 'bash -s' < $GITHUB_WORKSPACE/products/$PNAME/deploy.sh
        else
          echo "No $PNAME zip found"
        fi
        echo "Finished deploying $PNAME to staging at $(date +'%m-%d %H:%M:%S')"