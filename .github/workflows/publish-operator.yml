name: Publish Operator Docker Image

defaults:
  run:
    shell: bash

env:
  TZ: Asia/Shanghai

on:
  schedule:
    - cron: '30 16 * * *'
  workflow_dispatch:
    inputs:
      PUBLISH_EASYSEARCH:
        description: 'Publish easysearch'
        required: false
        type: boolean
        default: true
      PUBLISH_RUNTIME:
        description: 'Publish runtime'
        required: false
        type: boolean
        default: true
      PUBLISH_RELEASE:
        description: 'Publish release'
        type: boolean
        required: false
        default: true        
      PUBLISH_VERSIOIN:
        description: 'Publish version'
        required: true
        default: "1.2.0"

jobs:

  setup:
    runs-on: ubuntu-latest
    outputs:
      components: ${{ steps.set-components.outputs.components }}
    steps:
      - name: Set components for build
        id: set-components
        run: |
          # check publish version x.y.z
          
          # check inputs must easysearch or runtime or both
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            if [[ ! "${{ inputs.PUBLISH_VERSIOIN }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              echo "Invalid version format. Expected x.y.z"
              exit 1
            fi
            # check if the inputs are set
            if [[ "${{ inputs.PUBLISH_EASYSEARCH }}" == 'true' ]] && [[ "${{ inputs.PUBLISH_RUNTIME }}" == 'true' ]]; then
              COMPONENTS="easysearch,runtime"
            elif [[ "${{ inputs.PUBLISH_EASYSEARCH }}" == 'true' ]]; then
              COMPONENTS="easysearch"
            elif [[ "${{ inputs.PUBLISH_RUNTIME }}" == 'true' ]]; then
              COMPONENTS="runtime"
            else
              echo "No components to build"
              exit 1
            fi
          else
            COMPONENTS="easysearch,runtime"
          fi
          echo "components=$(echo $COMPONENTS | jq -Rc 'split(",")')" >> $GITHUB_OUTPUT
          cat $GITHUB_OUTPUT

  publish:
    needs: setup
    name: Publish ${{ matrix.component }} Docker Image
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component: ${{ fromJson(needs.setup.outputs.components) }}

    env:
      IMAGE_TYPE: operator
      LOCAL_HOST: ${{ secrets.LOCAL_HOST }}
      LOCAL_PORT: ${{ secrets.LOCAL_PORT }}
      SSH_GIT_REPO: ${{ secrets.SSH_GIT_REPO }}
      SSH_GITHUB_REPO: ${{ secrets.SSH_GITHUB_REPO }}
      SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      SSH_CONFIG: ${{ secrets.SSH_CONFIG }}
      CONNECT_SERVER: ${{ secrets.CONNECT_SERVER }}
      CONNECT_PORT: ${{ secrets.CONNECT_PORT }}
      CONNECT_KEY: ${{ secrets.CONNECT_KEY }}
      CONNECT_TIMEOUT: ${{ vars.CONNECT_TIMEOUT }}
      CONNECT_MODE: ${{ vars.CONNECT_MODE }}
      CONNECT_METHOD: ${{ secrets.CONNECT_METHOD }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup bootstrap
        uses: ./containers/bootstrap

      - name: Set up and check env for ${{ matrix.component }}-${{env.IMAGE_TYPE}}
        run: |
          echo "setting up env with ${{ matrix.component }}"
          # check if the env is set
          if [[ "${{ matrix.component }}" == "easysearch" ]]; then
            echo PNAME=k8s-$IMAGE_TYPE >> $GITHUB_ENV
            echo TNAME=${{ matrix.component }}-$IMAGE_TYPE >> $GITHUB_ENV
          elif [[ "${{ matrix.component }}" == "runtime" ]]; then
            echo PNAME=${{ matrix.component }}-$IMAGE_TYPE >> $GITHUB_ENV
            echo TNAME=${{ matrix.component }}-$IMAGE_TYPE >> $GITHUB_ENV
          fi
          # setting build number
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            RUN_NUMBER=${{ github.run_number }}
            OFFSET=${{ vars.OFFSET }}
            BUILD_NUMBER=$((RUN_NUMBER + OFFSET))
            if [[ "${{ inputs.PUBLISH_RELEASE }}" == 'true' ]]; then
              echo TAG="${{ inputs.PUBLISH_VERSIOIN }}-$BUILD_NUMBER" >> $GITHUB_ENV
            else
              echo TAG="${{ inputs.PUBLISH_VERSIOIN }}-SNAPSHOT-$BUILD_NUMBER" >> $GITHUB_ENV
            fi
            else
            BUILD_NUMBER="$(date +%Y%m%d)"
            DYNAMIC_VERSION=$(echo "${{ vars.PUBLISH_OPERATOR_VERSION }}" | awk -F. -v OFS=. '{ $2 = $2 + 1; $3 = 0; print $1, $2, $3 "_NIGHTLY" }')
            echo TAG="${DYNAMIC_VERSION}-$BUILD_NUMBER" >> $GITHUB_ENV
          fi
          cat $GITHUB_ENV

      - name: Run connect in background (easysearch only)
        if: matrix.component == 'easysearch'
        run: |
          connect -c "$GITHUB_WORKSPACE/.oss.json" >/dev/null 2>&1 &
          echo "Connect started with pid $!"
          sleep 5

      - name: Checkout ${{ matrix.component }}-${{env.IMAGE_TYPE}} repo
        run: |
          if [[ "${{ matrix.component }}" == "easysearch" ]]; then
            git clone --depth 1 $SSH_GIT_REPO/$PNAME $GITHUB_WORKSPACE/$PNAME
          elif [[ "${{ matrix.component }}" == "runtime" ]]; then
            git clone $SSH_GITHUB_REPO/$PNAME $GITHUB_WORKSPACE/$PNAME
          fi

      - name: Set up qemu for ${{ matrix.component }}-${{env.IMAGE_TYPE}}
        uses: docker/setup-qemu-action@v3

      - name: Set up docker buildx for ${{ matrix.component }}-${{env.IMAGE_TYPE}}
        uses: docker/setup-buildx-action@v3

      - name: Login to dockerhub for ${{ matrix.component }}-${{env.IMAGE_TYPE}}
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Docker build meta with ${{ matrix.component }}-${{env.IMAGE_TYPE}}
        id: tags
        working-directory: ${{ github.workspace }}/${{ env.PNAME }}
        run: |
          # make docker-buildx PLATFORMS="linux/amd64,linux/arm64" IMG="$REPO_NAME:$TAG"
          echo REPO_NAME=${{ vars.DOCKER_REPO }}/${{ env.TNAME }} >> $GITHUB_ENV
          if [[ "${{ inputs.PUBLISH_RELEASE }}" == "true" ]]; then
            echo "RELEASE_TAG=${{ vars.DOCKER_REPO }}/${{ env.TNAME }}:${{ inputs.PUBLISH_VERSIOIN }}" >> "$GITHUB_OUTPUT"
          fi

      - name: Docker build and push ${{ matrix.component }}-${{env.IMAGE_TYPE}} with ${{env.REPO_NAME}}:${{env.TAG}}
        uses: docker/build-push-action@v6
        with:
          context: ${{ github.workspace }}/${{ env.PNAME }}
          file: ${{ github.workspace }}/${{ env.PNAME }}/Dockerfile
          platforms: |
            linux/amd64
            linux/arm64
          tags: |
            ${{ env.REPO_NAME }}:${{env.TAG}}
            ${{ steps.tags.outputs.RELEASE_TAG }}
          push: true

      - name: Update GitHub release version
        if: ${{ inputs.PUBLISH_RELEASE }}
        env:
          GH_TOKEN: ${{ secrets.REPO_PAT }}
        run: |
          VERSION=${{ inputs.PUBLISH_VERSIOIN }}
          if [[ ! -z "$VERSION" && "$VERSION" =~ ^([0-9]+\.[0-9]+\.[0-9]+)$ ]]; then
            echo "Updating GitHub release version to $VERSION"
            gh variable set PUBLISH_OPERATOR_VERSION --body "$VERSION"
          fi
          

      - name: Deploy operator to staging k8s
        if: ${{ inputs.PUBLISH_RELEASE }}
        timeout-minutes: 30
        continue-on-error: true
        run: |
          #Deploy docker
          CNAME=manager
          DNAME=${{ matrix.component }}-operator-controller-$CNAME
          echo "kubectl -n infini set image deployments.apps/$DNAME $CNAME=${{env.REPO_NAME}}:${{ env.TAG }}" >> /tmp/update_image.sh
          echo "Deploy ${{ matrix.component }} to k8s staging at $(date +'%m-%d %H:%M:%S')"
          ssh staging 'bash -s' < /tmp/update_image.sh
          echo "Finished deploying $PNAME to staging at $(date +'%m-%d %H:%M:%S')"

  notify_on_failure:
    runs-on: ubuntu-latest
    needs: [setup, publish]
    if: failure()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Send Feishu Notification on Failure
        env:
          FEISHU_BOT_URL: ${{ secrets.FEISHU_BOT_WEBHOOK_URL }}
          REPO_NAME: ${{ github.repository }}
          WORKFLOW_NAME: ${{ github.workflow }}
          RUN_ID: ${{ github.run_id }}
          ACTOR: ${{ github.triggering_actor }}
          SERVER_URL: ${{ github.server_url }}
        run: $GITHUB_WORKSPACE/scripts/feishu_message.sh
