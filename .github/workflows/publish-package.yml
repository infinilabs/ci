name: Publish Coco App Package
permissions: write-all
defaults:
  run:
    shell: bash
env:
  CI: false
  REPO-NAME: "coco-app"
  APPNAME: "Coco-AI"
  PNAME: "coco/app"
  OSS_PATH: /Release/coco/app/snapshot
  TOKEN: ${{ secrets.X_TOKEN }}
  RELEASE_URL: ${{ vars.RELEASE_URL }}
  SSH_GIT_REPO: ${{ secrets.SSH_GIT_REPO }}
  SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
  SSH_CONFIG: ${{ secrets.SSH_CONFIG }}
  OSS_EP: ${{ secrets.OSS_EP }}
  OSS_AK: ${{ secrets.OSS_AK }}
  OSS_SK: ${{ secrets.OSS_SK }}
  OSS_BK: ${{ secrets.OSS_BK }}
  OSS_MODE: ${{ secrets.OSS_MODE }}
  TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
  TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ""
  APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
  APPLE_CERTIFICATE_PASSWORD: ""
  APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
  APPLE_ID: ${{ secrets.APPLE_ID }}
  APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
  APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
  NODEJS_VERSION: 20
  FILE_EXTENSIONS: '\.(dmg|rpm|deb|exe)$'
  UPGRADE_FILE_EXTENSIONS: '\.(gz|sig|AppImage|exe|json)$'
  SNAPCRAFT_BUILD_ENVIRONMENT: lxd
  SNAPCRAFT_STORE_CREDENTIALS: ${{ secrets.SNAPCRAFT_LOGIN_FILE_CONTENT }}
  WGET_CMD: "wget --no-check-certificate --connect-timeout=15 --read-timeout=60 --tries=3 --retry-connrefused --waitretry=5"

on:
  workflow_dispatch:
    inputs:
      PUBLISH_VERSION:
        description: 'Publish Package Version'
        required: false
        default: "0.5.3"
      PUBLISH_BUILD_NUMBER:
        description: 'Publish Package Build Number'
        required: false
        default: "2323"
      PUBLISH_RELEASE:
        description: 'Publish Release'
        required: false
        type: boolean
        default: true
jobs:
  build-app:
    env:
      PUBLISH_VERSION: ${{ inputs.PUBLISH_VERSION || vars.COCO_APP_PUBLISH_VERSION }}
      VITE_LOG_LEVEL: 'warn'
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: "macos-latest"
            target: "aarch64-apple-darwin"
            arch: "aarch64"
          - platform: "macos-latest"
            target: "x86_64-apple-darwin"
            arch: "amd64"

          - platform: "windows-2019"
            target: "x86_64-pc-windows-msvc"
            arch: "x64"
          - platform: "windows-2019"
            target: "i686-pc-windows-msvc"
            arch: "x86"
          - platform: "windows-2019"
            target: "aarch64-pc-windows-msvc"
            arch: "arm64"

          - platform: "ubuntu-22.04"
            target: "x86_64-unknown-linux-gnu"
            arch: "amd64"
          - platform: "ubuntu-22.04-arm"
            target: "aarch64-unknown-linux-gnu"
            arch: "arm64"

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Checkout coco app repository
        uses: actions/checkout@v4
        with: 
          repository: ${{ vars.GIT_REPO }}/${{ env.REPO-NAME }}
          ref: v0.5.0
          path: ${{ env.REPO-NAME }}

      - name: Init ${{ env.REPO-NAME }}
        run: |
          echo "Init ${{ env.REPO-NAME }}"
          cp -rf $GITHUB_WORKSPACE/products/${{ env.REPO-NAME }}/tauri.microsoftstore.conf.json $GITHUB_WORKSPACE/${{ env.REPO-NAME }}/src-tauri

      - name: Set version & tag with ${{ matrix.platform }}
        working-directory: ${{ env.REPO-NAME }}
        shell: bash
        run: |
          current_version=$PUBLISH_VERSION
          if [[ -z "$current_version" ]]; then
            echo "PUBLISH_VERSION is not set or is empty." >&2
            exit 1
          fi

          # Extract x.y.z using a regular expression
          if [[ -n "$PUBLISH_VERSION" ]]; then
            if [[ "$PUBLISH_VERSION" =~ ^([0-9]+\.[0-9]+\.[0-9]+)(-([1-9][0-9]*))?$ ]]; then
              current_version="${BASH_REMATCH[1]}"
              build_number="${BASH_REMATCH[3]}"
              
              if [[ -z "$build_number" ]]; then
                build_number=${{ inputs.PUBLISH_BUILD_NUMBER }}
              fi
            fi
          fi

          version="$current_version-$build_number"
          echo "Build $PNAME with $version"
          if ${{ matrix.platform == 'macos-latest' }}; then
            echo "Build version: $version at $(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S')"
            sed -i '' "s/\"version\": *\"[^\"]*\"/\"version\": \"$version\"/" package.json
            sed -i '' "s/^version = *\"[^\"]*\"/version = \"$version\"/" src-tauri/Cargo.toml
          elif ${{ matrix.platform == 'windows-2019' }}; then
            echo "Build version: $version at $(TZ=Asia/Shanghai date -d '+8 hour' '+%Y-%m-%d %H:%M:%S')"
            sed -i -e "s/\"version\": *\"[^\"]*\"/\"version\": \"$version\"/" package.json
            sed -i -e "s/^version = *\"[^\"]*\"/version = \"$version\"/" src-tauri/Cargo.toml
          else
            echo "Build version: $version at $(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S')"
            sed -i -e "s/\"version\": *\"[^\"]*\"/\"version\": \"$version\"/" package.json
            sed -i -e "s/^version = *\"[^\"]*\"/version = \"$version\"/" src-tauri/Cargo.toml
          fi
          
          tag=".v${current_version}"
          echo "VERSION=$version" >> $GITHUB_ENV
          echo "UPGRADE=$tag" >> $GITHUB_ENV

      - uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODEJS_VERSION }}

      - name: Install rust target
        working-directory: ${{ env.REPO-NAME }}/src-tauri
        run: rustup target add ${{ matrix.target }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './coco-app/src-tauri -> target'

      - name: Sync node version and setup cache
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODEJS_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: "**/pnpm-lock.yaml"

      - name: Install app dependencies and build web
        working-directory: ${{ env.REPO-NAME }}
        run: pnpm install
      
      - name: Install dependencies (ubuntu only)
        if: startsWith(matrix.platform, 'ubuntu-22.04') 
        run: |
            echo 'APT::Sandbox::User "root";' | sudo tee -a /etc/apt/apt.conf.d/10sandbox
            sudo apt-get update
            sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf xdg-utils
      
      - name: Build app with ${{ env.VERSION }}
        working-directory: ${{ env.REPO-NAME }}
        env:
          NODE_OPTIONS: "--max_old_space_size=8192"
          CARGO_NET_GIT_FETCH_WITH_CLI: true
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ""
        run: |
          $GITHUB_WORKSPACE/scripts/env-init.sh
          if [[ "${{ matrix.target }}" == "i686-pc-windows-msvc" ]]; then
            pnpm tauri build --target ${{ matrix.target }}
          else
            if [[ "${{ matrix.platform }}" =~ ^ubuntu.* ]]; then
              echo "Building for Ubuntu with target: ${{ matrix.target }} will at snap package step"
              # for ubuntu, we will download the deb package
              mkdir -p src-tauri/target/${{ matrix.target }}/release/bundle/deb
              $WGET_CMD -q -nc -O /tmp/${{ env.APPNAME }}-${{ matrix.arch }}.zip $RELEASE_URL/${PNAME}/stable/${{ env.APPNAME }}-${{ env.VERSION }}-deb-linux-${{ matrix.arch }}.zip
              [ -e ] && unzip /tmp/${{ env.APPNAME }}-${{ matrix.arch }}.zip -d src-tauri/target/${{ matrix.target }}/release/bundle/deb/
              ls -lh src-tauri/target/${{ matrix.target }}/release/bundle/deb/*.deb
              mkdir -p snap_sources && cp -rf src-tauri/target/${{ matrix.target }}/release/bundle/deb/*.deb snap_sources/${{ env.APPNAME }}_${{ env.VERSION }}_${{ matrix.arch }}.deb
              echo "Build deb package with $(ls -lh snap_sources/*.deb)"
            else
              make add-dep-pizza-engine
              pnpm run tauri build --target ${{ matrix.target }} --features use_pizza_engine
            fi
          fi

      - name: Setup LXD (ubuntu only)
        if: startsWith(matrix.platform, 'ubuntu-22.04')
        uses: ./containers/lxd
        with:
          group: lxd
          channel: latest/stable

      - name: Install Snapcraft (ubuntu only)
        if: startsWith(matrix.platform, 'ubuntu-22.04')
        run: |
          sudo snap install core22
          sudo snap install snapcraft --classic

      - name: Generate snapcraft.yaml (ubuntu only)
        if: startsWith(matrix.platform, 'ubuntu-22.04')
        working-directory: ${{ env.REPO-NAME }}
        env:
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ""
        run: |
          # Generate snapcraft.yaml from template with download part
          cp -rf $GITHUB_WORKSPACE/products/${{ env.REPO-NAME }}/snapcraft-with-down.yaml snapcraft.yaml
          sed -i "s|__ARCH__|${{ matrix.arch }}|g" snapcraft.yaml
          sed -i "s|__TARGET__|${{ matrix.target }}|g" snapcraft.yaml
          sed -i "s|__VERSION__|${{ env.VERSION }}|g" snapcraft.yaml
          sed -i "s|__APPARCHNAME__|${{ env.APPNAME }}_${{ env.VERSION }}_${{ matrix.arch }}|g" snapcraft.yaml
          sed -i "s|__APPNAME__|${{ env.APPNAME }}-${{ env.VERSION }}|g" snapcraft.yaml
          sed -i "s|__PRIVATE_KEY__|${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}|g" snapcraft.yaml
          cat snapcraft.yaml

      - name: Check files
        continue-on-error: true
        working-directory: ${{ env.REPO-NAME }}
        shell: bash
        run: |
          target="src-tauri/target/${{ matrix.target }}/release/bundle"
          if [[ -d "$target" ]]; then
            find "$target" -type f \( \
                    -name "*.dmg" -o \
                    -name "*.deb" -o \
                    -name "*.rpm" -o \
                    -name "*.exe" -o \
                    -name "*.AppImage" \
                \)
          fi

      - name: Build snap package (ubuntu only)
        if: startsWith(matrix.platform, 'ubuntu-22.04')
        working-directory: ${{ env.REPO-NAME }}
        id: build_snap
        run: |
          sudo snapcraft --debug --output '${{ env.APPNAME }}-${{ env.VERSION }}.snap'
          SNAP_FILE_PATH=$(ls *.snap | head -n 1)
          if [ -z "$SNAP_FILE_PATH" ]; then echo "Error: No .snap file found"; exit 1; fi
          echo "snap_package_path=$SNAP_FILE_PATH" >> $GITHUB_OUTPUT
          cat $GITHUB_OUTPUT

      - name: Push and Release Snap for ${{ matrix.platform }}
        if: startsWith(matrix.platform, 'ubuntu-22.04')
        working-directory: ${{ env.REPO-NAME }}
        run: snapcraft upload --release latest/stable "${{ steps.build_snap.outputs.snap_package_path }}"
      