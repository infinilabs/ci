name: Publish Coco App Package 
defaults:
  run:
    shell: bash
env:
  CI: false
  REPO-NAME: "coco-app"
  PNAME: "coco/app"
  OSS_PATH: /Release/coco/app/snapshot
  TOKEN: ${{ secrets.X_TOKEN }}
  RELEASE_URL: ${{ vars.RELEASE_URL }}
  SSH_GIT_REPO: ${{ secrets.SSH_GIT_REPO }}
  SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
  SSH_CONFIG: ${{ secrets.SSH_CONFIG }}
  OSS_EP: ${{ secrets.OSS_EP }}
  OSS_AK: ${{ secrets.OSS_AK }}
  OSS_SK: ${{ secrets.OSS_SK }}
  OSS_BK: ${{ secrets.OSS_BK }}
  OSS_MODE: ${{ secrets.OSS_MODE }}
  TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
  TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ""
  APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
  APPLE_CERTIFICATE_PASSWORD: ""
  APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
  APPLE_ID: ${{ secrets.APPLE_ID }}
  APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
  APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
  NODEJS_VERSION: 20
  FILE_EXTENSIONS: '\.(dmg|rpm|deb|exe)$'
  UPGRADE_FILE_EXTENSIONS: '\.(gz|sig|AppImage|exe|json)$'

on:
  workflow_dispatch:
    inputs:
      PUBLISH_VERSION:
        description: 'Publish Package Version'
        required: false
        default: "0.5.3"
      PUBLISH_BUILD_NUMBER:
        description: 'Publish Package Build Number'
        required: false
        default: "2323"
      PUBLISH_RELEASE:
        description: 'Publish Release'
        required: false
        type: boolean
        default: false
jobs:
  build-app:
    env:
      PUBLISH_VERSION: ${{ inputs.PUBLISH_VERSION || vars.COCO_APP_PUBLISH_VERSION }}
      VITE_LOG_LEVEL: 'warn'
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: "macos-latest"
            target: "aarch64-apple-darwin"
          - platform: "macos-latest"
            target: "x86_64-apple-darwin"

          - platform: "windows-latest"
            target: "x86_64-pc-windows-msvc"
          - platform: "windows-latest"
            target: "i686-pc-windows-msvc"
          - platform: "windows-latest"
            target: "aarch64-pc-windows-msvc"

          - platform: "ubuntu-22.04"
            target: "x86_64-unknown-linux-gnu"
          - platform: "ubuntu-22.04-arm"
            target: "aarch64-unknown-linux-gnu"

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Checkout coco app repository
        uses: actions/checkout@v4
        with: 
          repository: ${{ vars.GIT_REPO }}/${{ env.REPO-NAME }}
          ref: v0.5.0
          path: ${{ env.REPO-NAME }}

      - name: Set version & tag with ${{ matrix.platform }}
        working-directory: ${{ env.REPO-NAME }}
        shell: bash
        run: |
          current_version=$PUBLISH_VERSION
          if [[ -z "$current_version" ]]; then
            echo "PUBLISH_VERSION is not set or is empty." >&2
            exit 1
          fi

          # Extract x.y.z using a regular expression
          if [[ -n "$PUBLISH_VERSION" ]]; then
            if [[ "$PUBLISH_VERSION" =~ ^([0-9]+\.[0-9]+\.[0-9]+)(-([1-9][0-9]*))?$ ]]; then
              current_version="${BASH_REMATCH[1]}"
              build_number="${BASH_REMATCH[3]}"
              
              if [[ -z "$build_number" ]]; then
                build_number=${{ inputs.PUBLISH_BUILD_NUMBER }}
              fi
            fi
          fi

          version="$current_version-$build_number"
          echo "Build $PNAME with $version"
          if ${{ matrix.platform == 'macos-latest' }}; then
            echo "Build version: $version at $(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S')"
            sed -i '' "s/\"version\": *\"[^\"]*\"/\"version\": \"$version\"/" package.json
            sed -i '' "s/^version = *\"[^\"]*\"/version = \"$version\"/" src-tauri/Cargo.toml
          elif ${{ matrix.platform == 'windows-latest' }}; then
            echo "Build version: $version at $(TZ=Asia/Shanghai date -d '+8 hour' '+%Y-%m-%d %H:%M:%S')"
            sed -i -e "s/\"version\": *\"[^\"]*\"/\"version\": \"$version\"/" package.json
            sed -i -e "s/^version = *\"[^\"]*\"/version = \"$version\"/" src-tauri/Cargo.toml
          else
            echo "Build version: $version at $(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S')"
            sed -i -e "s/\"version\": *\"[^\"]*\"/\"version\": \"$version\"/" package.json
            sed -i -e "s/^version = *\"[^\"]*\"/version = \"$version\"/" src-tauri/Cargo.toml
          fi
          
          tag=".v${current_version}"
          echo "VERSION=$version" >> $GITHUB_ENV
          echo "UPGRADE=$tag" >> $GITHUB_ENV

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODEJS_VERSION }}

      - uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Install rust target
        working-directory: ${{ env.REPO-NAME }}/src-tauri
        run: rustup target add ${{ matrix.target }}

      - name: Install dependencies (ubuntu only)
        if: startsWith(matrix.platform, 'ubuntu-22.04') 
        working-directory: ${{ env.REPO-NAME }}
        run: |
            sudo apt-get update
            sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf xdg-utils

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './coco-app/src-tauri -> target'

      - name: Sync node version and setup cache
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODEJS_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: "**/pnpm-lock.yaml"

      - name: Install app dependencies and build web
        working-directory: ${{ env.REPO-NAME }}
        run: pnpm install

      - name: Build app with ${{ env.VERSION }}
        working-directory: ${{ env.REPO-NAME }}
        env:
          NODE_OPTIONS: "--max_old_space_size=8192"
          CARGO_NET_GIT_FETCH_WITH_CLI: true
        run: |
          $GITHUB_WORKSPACE/scripts/env-init.sh
          if [[ "${{ matrix.target }}" == "i686-pc-windows-msvc" ]]; then
            pnpm tauri build --target ${{ matrix.target }}
          else
            #( cd src-tauri && cargo add --git ssh://git@github.com/infinilabs/pizza.git pizza-engine --features query_string_parser,persistence )
            make add-dep-pizza-engine
            pnpm tauri build --target ${{ matrix.target }} --features use_pizza_engine
          fi

      - name: Rename upgrade asserts
        working-directory: ${{ env.REPO-NAME }}
        run: |
          bundle_dir="src-tauri/target/${{ matrix.target }}/release/bundle"
          base_dir="${bundle_dir}"

          if [[ "${{ matrix.target }}" == *"apple-darwin"* ]]; then
            base_dir+="/macos"
          elif [[ "${{ matrix.target }}" == *"linux-gnu"* ]]; then
            base_dir+="/appimage"
          elif [[ "${{ matrix.target }}" == *"windows-msvc"* ]]; then
            base_dir+="/nsis"
          fi

          puer_version="$(echo "$VERSION" | sed 's/-.*//')"
          version="$VERSION"

          find "$base_dir" -type f -name "*${puer_version}*" -print0 | while IFS= read -r -d $'\0' file; do
            if [[ "$file" == *"$version"* ]]; then
              echo "Skipping '$file', already contains the full version"
              continue
            fi
            new_file="${file/$puer_version/${version}}"
            echo "Renaming '$file' to '$new_file'"
            mv "$file" "$new_file"
          done
          # Delete the ubuntu files
          if [[ "${{ matrix.target }}" =~ "unknown-linux-gnu" ]]; then
            find "$bundle_dir" \
              \( \
                -name "*arm64.deb.sig" -o \
                -name "*amd64.deb.sig" -o \
                -name "*aarch64.deb.sig" -o \
                -name "*x86_64.rpm.sig" -o \
                -name "*aarch64.rpm.sig" -o \
                -name "control.tar.gz" -o \
                -name "data.tar.gz" \
              \) -print0 | xargs -0 rm -vf
          fi
          # Rename the darwin
          if [[ "${{ matrix.target }}" == "aarch64-apple-darwin" ]]; then
            mv "${base_dir}/Coco-AI.app.tar.gz.sig" "${base_dir}/Coco-AI_${version}_arm64.app.tar.gz.sig"
            mv "${base_dir}/Coco-AI.app.tar.gz" "${base_dir}/Coco-AI_${version}_arm64.app.tar.gz"
          elif [[ "${{ matrix.target }}" == "x86_64-apple-darwin" ]]; then
            mv "${base_dir}/Coco-AI.app.tar.gz.sig" "${base_dir}/Coco-AI_${version}_amd64.app.tar.gz.sig"
            mv "${base_dir}/Coco-AI.app.tar.gz" "${base_dir}/Coco-AI_${version}_amd64.app.tar.gz"
          fi
          
      - name: Check files
        working-directory: ${{ env.REPO-NAME }}
        shell: bash
        run: |
          target="src-tauri/target/${{ matrix.target }}/release/bundle"
          SOURCES=$(find "$target" -type f \( \
                  -name "*.dmg" -o \
                  -name "*.deb" -o \
                  -name "*.rpm" -o \
                  -name "*.exe" -o \
                  -name "*.gz" -o \
                  -name "*.sig" -o \
                  -name "*.AppImage" \
              \))
          if [[ ! -z "$SOURCES" ]]; then
            echo "Found files: $SOURCES"
          else
            echo "No files found matching the specified patterns."
            exit 1
          fi


      