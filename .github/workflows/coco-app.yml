name: Coco App Files Publish 
defaults:
  run:
    shell: bash
env:
  REPO-NAME: "coco-app"
  PNAME: "coco/app"
  OSS_PATH: /Release/coco/app/snapshot
  OSS_EP: ${{ secrets.OSS_EP }}
  OSS_AK: ${{ secrets.OSS_AK }}
  OSS_SK: ${{ secrets.OSS_SK }}
  OSS_BK: ${{ secrets.OSS_BK }}
  OSS_MODE: ${{ secrets.OSS_MODE }}
  RELEASE_URL: ${{ vars.RELEASE_URL }}
  PUBLISH_VERSION: ${{ inputs.PUBLISH_VERSION || vars.COCO_PUBLISH_VERSION }}
  TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
  TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ""
  APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
  APPLE_CERTIFICATE_PASSWORD: ""
  APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
  APPLE_ID: ${{ secrets.APPLE_ID }}
  APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
  APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
  NODEJS_VERSION: 20
  FILE_EXTENSIONS: '\.(dmg|rpm|deb|exe)$'
  UPGRADE_FILE_EXTENSIONS: '\.(gz|sig|AppImage|exe|json)$'

on:
  schedule:
    - cron: '45 16 * * *'
  workflow_dispatch:
    inputs:
      PUBLISH_VERSION:
        description: 'Publish Version'
        required: false
        default: "0.2.1-2000"
      PUBLISH_RELEASE:
        description: 'Publish Release'
        required: false
        type: boolean
        default: true
jobs:
  build-app:
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: "macos-latest"
            target: "aarch64-apple-darwin"
          - platform: "macos-latest"
            target: "x86_64-apple-darwin"

          - platform: "windows-latest"
            target: "x86_64-pc-windows-msvc"
          - platform: "windows-latest"
            target: "i686-pc-windows-msvc"
          - platform: "windows-latest"
            target: "aarch64-pc-windows-msvc"

          - platform: "ubuntu-22.04"
            target: "x86_64-unknown-linux-gnu"

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Checkout coco app repository
        uses: actions/checkout@v4
        with: 
          repository: ${{ vars.GIT_REPO }}/${{ env.REPO-NAME }}
          ref: main
          path: ${{ env.REPO-NAME }}

      - name: Set Version with windows-latest
        if: ${{ !inputs.PUBLISH_RELEASE && matrix.platform == 'windows-latest' }}
        working-directory: ${{ env.REPO-NAME }}
        shell: pwsh
        run: |
          $PackageJsonPath = ".\package.json"
          $Package = Get-Content -Raw $PackageJsonPath | ConvertFrom-Json
          $CurrentVersion = $Package.version
          echo "Current version: $CurrentVersion"
          $VersionParts = $CurrentVersion.Split('.')
          $VersionParts[2] = [int]$VersionParts[2] + 1
          $DateStr = Get-Date -Format yyyyMMdd
          $NewVersion = "$($VersionParts[0]).$($VersionParts[1]).$($VersionParts[2])-NIGHTLY-$DateStr"
          $Package.version = $NewVersion
          $Package | ConvertTo-Json -Depth 10 | Set-Content -NoNewline -Encoding UTF8 $PackageJsonPath
          Write-Host "Version updated to: $NewVersion"

      - name: Set Version with macos-latest and ubuntu-22.04
        if: ${{ !inputs.PUBLISH_RELEASE && matrix.platform != 'windows-latest' }}
        working-directory: ${{ env.REPO-NAME }}
        shell: bash
        run: |
          package_json="package.json"
          current_version=$(grep -o '"version": *"[^"]*"' "$package_json" | sed 's/.*"\(.*\)"/\1/')
          date_str=$(date +%Y%m%d)
          IFS=. read -r major minor patch <<< "$current_version"
          new_version="$major.$minor.$((patch + 1))-NIGHTLY-${date_str}"
          if ${{ matrix.platform == 'macos-latest' }}; then
            sed -i '' "s/\"version\": *\"[^\"]*\"/\"version\": \"$new_version\"/" "$package_json"
          else
            sed -i -e "s/\"version\": *\"[^\"]*\"/\"version\": \"$new_version\"/" "$package_json"
          fi
          echo "Version updated to: $new_version"

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODEJS_VERSION }}

      - uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Install rust target
        run: rustup target add ${{ matrix.target }}

      - name: Install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Install Rust stable
        run: rustup toolchain install stable --no-self-update

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './coco-app/src-tauri -> target'

      - name: Sync node version and setup cache
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODEJS_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: "**/pnpm-lock.yaml"

      - name: Install app dependencies and build web
        working-directory: ${{ env.REPO-NAME }}
        run: pnpm install --frozen-lockfile

      - name: Build app
        working-directory: ${{ env.REPO-NAME }}
        run: pnpm tauri build --target ${{ matrix.target }}

      - name: Check files
        working-directory: ${{ env.REPO-NAME }}
        shell: bash
        run: |
          target="src-tauri/target/${{ matrix.target }}/release/bundle"
          find "$target" -type f \( \
                  -name "*.dmg" -o \
                  -name "*.deb" -o \
                  -name "*.rpm" -o \
                  -name "*.exe" -o \
                  -name "*.AppImage" -o \
                  -name "*.gz" -o \
                  -name "*.sig" -o \
                  -name "*.json" \
              \)

      - name: Upload assets to OSS with {{ matrix.target }}
        uses: infinilabs/oss-upload@v0
        with:
          region: ${{ secrets.OSS_EP }}
          access-key-id: ${{ secrets.OSS_AK }}
          access-key-secret: ${{ secrets.OSS_SK }}
          bucket: ${{ secrets.OSS_BK }}
          secure: true
          local-folder: src-tauri/target/${{ matrix.target }}/release/bundle
          file-pattern: '{*.dmg,*.rpm,*.deb,*.exe}'
          remote-dir: ${{ env.OSS_PATH }}

      - name: Upload upgrade assets to OSS with {{ matrix.target }}
        if: ${{ inputs.PUBLISH_RELEASE }}
        uses: infinilabs/oss-upload@v0
        with:
          region: oss-cn-shanghai
          access-key-id: ${{ secrets.OSS_AK }}
          access-key-secret: ${{ secrets.OSS_SK }}
          bucket: ${{ secrets.OSS_BK }}
          secure: false
          local-folder: src-tauri/target/${{ matrix.target }}/release/bundle
          file-pattern: '{*.sig,*.AppImage,*.exe,*.gz}'
          remote-dir: ${{ env.OSS_PATH }}    

      - name: Update Release version variable
        if: ${{ inputs.PUBLISH_RELEASE && matrix.platform == 'ubuntu-22.04' && matrix.target == 'x86_64-unknown-linux-gnu' }}
        env:
          GH_TOKEN: ${{ secrets.REPO_PAT }}
        run: |
          PUBLISH_RELEASE="${{ inputs.PUBLISH_RELEASE || vars.PUBLISH_RELEASE || 'FALSE' }}"
          if [[ "$(echo "$PUBLISH_RELEASE" | tr '[:upper:]' '[:lower:]')" == "true" ]]; then
            COCO_VER=${{ inputs.PUBLISH_VERSION }}
            # set actions variables
            gh variable set COCO_APP_PUBLISH_VERSION --body "$COCO_VER"
          fi