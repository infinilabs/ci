name: Coco App Files Publish 
defaults:
  run:
    shell: bash
env:
  CI: false
  REPO-NAME: "coco-app"
  PNAME: "coco/app"
  OSS_PATH: /Release/coco/app/snapshot
  RELEASE_URL: ${{ vars.RELEASE_URL }}
  OSS_EP: ${{ secrets.OSS_EP }}
  OSS_AK: ${{ secrets.OSS_AK }}
  OSS_SK: ${{ secrets.OSS_SK }}
  OSS_BK: ${{ secrets.OSS_BK }}
  OSS_MODE: ${{ secrets.OSS_MODE }}
  TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
  TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ""
  APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
  APPLE_CERTIFICATE_PASSWORD: ""
  APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
  APPLE_ID: ${{ secrets.APPLE_ID }}
  APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
  APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
  NODEJS_VERSION: 20
  FILE_EXTENSIONS: '\.(dmg|rpm|deb|exe)$'
  UPGRADE_FILE_EXTENSIONS: '\.(gz|sig|AppImage|exe|json)$'

on:
  schedule:
    - cron: '45 18 * * *'
  workflow_dispatch:
    inputs:
      PUBLISH_VERSION:
        description: 'Publish Version'
        required: false
        default: "0.3.0-2008"
      PUBLISH_RELEASE:
        description: 'Publish Release'
        required: false
        type: boolean
        default: true
jobs:
  build-app:
    env:
      PUBLISH_VERSION: ${{ inputs.PUBLISH_VERSION || vars.COCO_APP_PUBLISH_VERSION }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: "macos-latest"
            target: "aarch64-apple-darwin"
          - platform: "macos-latest"
            target: "x86_64-apple-darwin"

          - platform: "windows-latest"
            target: "x86_64-pc-windows-msvc"
          - platform: "windows-latest"
            target: "i686-pc-windows-msvc"
          - platform: "windows-latest"
            target: "aarch64-pc-windows-msvc"

          - platform: "ubuntu-22.04"
            target: "x86_64-unknown-linux-gnu"

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Checkout coco app repository
        uses: actions/checkout@v4
        with: 
          repository: ${{ vars.GIT_REPO }}/${{ env.REPO-NAME }}
          ref: main
          path: ${{ env.REPO-NAME }}

      - name: Set Tag with ${{ matrix.platform }}
        if: ${{ inputs.PUBLISH_RELEASE }}
        working-directory: ${{ env.REPO-NAME }}
        shell: bash
        run: |
          current_version=$PUBLISH_VERSION
          if [ -z "$current_version" ]; then
            echo "PUBLISH_VERSION is not set or is empty." >&2
            exit 1
          fi

          # Extract x.y.z using a regular expression
          if [[ "$current_version" =~ ^([0-9]+\.[0-9]+\.[0-9]+) ]]; then
            current_version="${BASH_REMATCH[1]}"
            build_number="${BASH_REMATCH[2]}"
          else
            echo "Invalid PUBLISH_VERSION format: '$current_version'. Expected x.y.z or x.y.z-suffix." >&2
            exit 1
          fi

          version=$current_version
          if ${{ matrix.platform == 'macos-latest' }}; then
            echo "Build version: $version at $(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S')"
            sed -i '' "s/\"version\": *\"[^\"]*\"/\"version\": \"$version\"/" package.json
          elif ${{ matrix.platform == 'windows-latest' }}; then
            echo "Build version: $version at $(TZ=Asia/Shanghai date -d '+8 hour' '+%Y-%m-%d %H:%M:%S')"
            sed -i -e "s/\"version\": *\"[^\"]*\"/\"version\": \"$version\"/" package.json
          else
            echo "Build version: $version at $(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S')"
            sed -i -e "s/\"version\": *\"[^\"]*\"/\"version\": \"$version\"/" package.json
          fi
          
          tag=".v${current_version}"
          echo "VERSION=$version" >> $GITHUB_ENV
          echo "UPGRADE=$tag" >> $GITHUB_ENV
          echo "BUILD_NUMBER=$build_number" >> $GITHUB_ENV

      - name: Set Version with ${{ matrix.platform }}
        if: ${{ !inputs.PUBLISH_RELEASE }}
        working-directory: ${{ env.REPO-NAME }}
        shell: bash
        run: |
          current_version=$PUBLISH_VERSION
          if [ -z "$current_version" ]; then
            echo "PUBLISH_VERSION is not set or is empty." >&2
            exit 1
          fi

          # Extract x.y.z using a regular expression
          if [[ "$current_version" =~ ^([0-9]+\.[0-9]+\.[0-9]+) ]]; then
            current_version="${BASH_REMATCH[1]}"
          else
            echo "Invalid PUBLISH_VERSION format: '$current_version'. Expected x.y.z or x.y.z-suffix." >&2
            exit 1
          fi
          build_number=$(TZ=Asia/Shanghai date +%Y%m%d)
          IFS=. read -r major minor patch <<< "$current_version"
          version="$major.$minor.$((patch + 1))-NIGHTLY-$build_number"
          if ${{ matrix.platform == 'macos-latest' }}; then
            echo "Build version: $version at $(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S')"
            sed -i '' "s/\"version\": *\"[^\"]*\"/\"version\": \"$version\"/" package.json
          elif ${{ matrix.platform == 'windows-latest' }}; then
            build_number=$(TZ=Asia/Shanghai date -d '+8 hour' '+%Y%m%d')
            version="$major.$minor.$((patch + 1))-NIGHTLY-$build_number"
            echo "Build version: $version at $(TZ=Asia/Shanghai date -d '+8 hour' '+%Y-%m-%d %H:%M:%S')"
            sed -i -e "s/\"version\": *\"[^\"]*\"/\"version\": \"$version\"/" package.json
          else
            echo "Build version: $version at $(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S')"
            sed -i -e "s/\"version\": *\"[^\"]*\"/\"version\": \"$version\"/" package.json
          fi
          echo "VERSION=$version" >> $GITHUB_ENV

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODEJS_VERSION }}

      - uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Install rust target
        run: rustup target add ${{ matrix.target }}

      - name: Install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Install Rust stable
        run: rustup toolchain install stable --no-self-update

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './coco-app/src-tauri -> target'

      - name: Sync node version and setup cache
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODEJS_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: "**/pnpm-lock.yaml"

      - name: Install app dependencies and build web
        working-directory: ${{ env.REPO-NAME }}
        run: pnpm install --frozen-lockfile

      - name: Build app
        working-directory: ${{ env.REPO-NAME }}
        run: pnpm tauri build --target ${{ matrix.target }}

      - name: Rename upgrade asserts
        if: ${{ matrix.platform == 'macos-latest' }};
        working-directory: ${{ env.REPO-NAME }}
        run: |
          base_dir="src-tauri/target/${{ matrix.target }}/release/bundle/macos"
          version=${{ env.VERSION }}

          # Rename files based on architecture
          if [[ "${{ matrix.target }}" == "aarch64-apple-darwin" ]]; then
            mv "${base_dir}/Coco-AI.app.tar.gz.sig" "${base_dir}/Coco-AI_${version}_arm64.app.tar.gz.sig"
            mv "${base_dir}/Coco-AI.app.tar.gz" "${base_dir}/Coco-AI_${version}_arm64.app.tar.gz"
          elif [[ "${{ matrix.target }}" == "x86_64-apple-darwin" ]]; then
            mv "${base_dir}/Coco-AI.app.tar.gz.sig" "${base_dir}/Coco-AI_${version}_amd64.app.tar.gz.sig"
            mv "${base_dir}/Coco-AI.app.tar.gz" "${base_dir}/Coco-AI_${version}_amd64.app.tar.gz"
          fi
          
      - name: Check files
        working-directory: ${{ env.REPO-NAME }}
        shell: bash
        run: |
          target="src-tauri/target/${{ matrix.target }}/release/bundle"
          find "$target" -type f \( \
                  -name "*.dmg" -o \
                  -name "*.deb" -o \
                  -name "*.rpm" -o \
                  -name "*.exe" -o \
                  -name "*.gz" -o \
                  -name "*.sig" -o \
                  -name "*.AppImage" \
              \)

      - name: Upload upgrade assets to OSS with ${{ matrix.target }}
        if: ${{ inputs.PUBLISH_RELEASE }}
        uses: infinilabs/oss-upload@v0
        with:
          region: oss-cn-shanghai
          access-key-id: ${{ secrets.OSS_AK }}
          access-key-secret: ${{ secrets.OSS_SK }}
          bucket: ${{ secrets.OSS_BK }}
          secure: false
          local-folder: ${{ github.workspace }}/${{ env.REPO-NAME }}/src-tauri/target/${{ matrix.target }}/release/bundle
          file-pattern: '**/*.{AppImage,sig,exe,gz}'
          remote-dir: "${{ env.OSS_PATH }}/${{ env.UPGRADE }}"

      - name: Upload assets to OSS with ${{ matrix.target }}
        uses: infinilabs/oss-upload@v0
        with:
          region: oss-cn-shanghai
          access-key-id: ${{ secrets.OSS_AK }}
          access-key-secret: ${{ secrets.OSS_SK }}
          bucket: ${{ secrets.OSS_BK }}
          secure: true
          local-folder: ${{ github.workspace }}/${{ env.REPO-NAME }}/src-tauri/target/${{ matrix.target }}/release/bundle
          file-pattern: '**/*.{exe,dmg,deb,rpm}'
          repack-version: "${{ env.VERSION }}-${{ env.BUILD_NUMBER }}"
          remote-dir: ${{ env.OSS_PATH }}

  release:
    needs: build-app
    runs-on: ubuntu-latest
    env:
      PUBLISH_VERSION: ${{ inputs.PUBLISH_VERSION || vars.COCO_APP_PUBLISH_VERSION }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Init Env
        run: |
          $GITHUB_WORKSPACE/scripts/env-init.sh
          # Setup environment
          current_version=$PUBLISH_VERSION
          if [ -z "$current_version" ]; then
            echo "PUBLISH_VERSION is not set or is empty." >&2
            exit 1
          fi

          # Extract x.y.z using a regular expression
          if [[ "$current_version" =~ ^([0-9]+\.[0-9]+\.[0-9]+) ]]; then
            current_version="${BASH_REMATCH[1]}"
          else
            echo "Invalid PUBLISH_VERSION format: '$current_version'. Expected x.y.z or x.y.z-suffix." >&2
            exit 1
          fi

          version=$current_version
          tag=".v${current_version}"
          echo "VERSION=$version" >> $GITHUB_ENV
          echo "UPGRADE=$tag" >> $GITHUB_ENV

      - name: Generate .latest.json
        shell: bash
        if: ${{ inputs.PUBLISH_RELEASE }}
        run: |
          PRE_PATH="$PNAME/snapshot"
          RELEASE_PATH="$PNAME/stable"
          PRE_UPGRADE_PATH="$PRE_PATH/$UPGRADE"
          RELEASE_UPGRADE_PATH="$RELEASE_PATH/$UPGRADE"
          # Function to fetch signatures
          get_signature() {
            url="$1"
            if curl -s -f "$url" > signature.txt; then
              cat signature.txt
            else
              echo "Failed to download signature from $url"
              exit 1
            fi
          }

          # Create the base JSON structure
          cat > update.json <<EOF
          {
            "version": "${VERSION}",
            "notes": "",
            "pub_date": "$(date -u +'%Y-%m-%dT%H:%M:%S.000Z')",
            "platforms": {
              "darwin-aarch64": {
                "url": "${RELEASE_URL}/${RELEASE_UPGRADE_PATH}/Coco-AI_${VERSION}_arm64.app.tar.gz"
              },
              "darwin-x86_64": {
                "url": "${RELEASE_URL}/${RELEASE_UPGRADE_PATH}/Coco-AI_${VERSION}_amd64.app.tar.gz"
              },
              "linux-x86_64": {
                "url": "${RELEASE_URL}/${RELEASE_UPGRADE_PATH}/Coco-AI_${VERSION}_amd64.AppImage"
              },
              "linux-aarch64": {
                "url": "${RELEASE_URL}/${RELEASE_UPGRADE_PATH}/Coco-AI_${VERSION}_arm64.AppImage"
              },
              "windows-x86_64": {
                "url": "${RELEASE_URL}/${RELEASE_UPGRADE_PATH}/Coco-AI_${VERSION}_x64-setup.exe"
              },
              "windows-aarch64": {
                "url": "${RELEASE_URL}/${RELEASE_UPGRADE_PATH}/Coco-AI_${VERSION}_arm64-setup.exe"
              },
              "windows-i686": {
                "url": "${RELEASE_URL}/${RELEASE_UPGRADE_PATH}/Coco-AI_${VERSION}_x86-setup.exe"
              }
            }
          }
          EOF

          # Initialize jq statements
          jq_statements=""

          # Add signature for macOS -  adjust for download artifact directory structure
          jq_statements+=" .platforms.\"darwin-aarch64\".signature = \"$(get_signature ${RELEASE_URL}/${PRE_UPGRADE_PATH}/Coco-AI_${VERSION}_arm64.app.tar.gz.sig)\" |"
          jq_statements+=" .platforms.\"darwin-x86_64\".signature = \"$(get_signature ${RELEASE_URL}/${PRE_UPGRADE_PATH}/Coco-AI_${VERSION}_amd64.app.tar.gz.sig)\" |"

          # Add signature for Linux - different URLs for each architecture
          jq_statements+=" .platforms.\"linux-x86_64\".signature = \"$(get_signature ${RELEASE_URL}/${PRE_UPGRADE_PATH}/Coco-AI_${VERSION}_amd64.AppImage.sig)\" |"
          jq_statements+=" .platforms.\"linux-aarch64\".signature = \"$(get_signature ${RELEASE_URL}/${PRE_UPGRADE_PATH}/Coco-AI_${VERSION}_amd64.AppImage.sig)\" |"

          # Add signature for Windows, adjust for artifact structure
          jq_statements+=" .platforms.\"windows-x86_64\".signature = \"$(get_signature ${RELEASE_URL}/${PRE_UPGRADE_PATH}/Coco-AI_${VERSION}_x64-setup.exe.sig)\" |"
          jq_statements+=" .platforms.\"windows-aarch64\".signature = \"$(get_signature ${RELEASE_URL}/${PRE_UPGRADE_PATH}/Coco-AI_${VERSION}_arm64-setup.exe.sig)\" |"
          jq_statements+=" .platforms.\"windows-i686\".signature = \"$(get_signature ${RELEASE_URL}/${PRE_UPGRADE_PATH}/Coco-AI_${VERSION}_x86-setup.exe.sig)\" "

          # Apply jq statements
          jq "${jq_statements}" update.json > .latest.json

          oss upload -c $GITHUB_WORKSPACE/.oss.yml -o -k "$PNAME/snapshot/$UPGRADE" -f $GITHUB_WORKSPACE/.latest.json
