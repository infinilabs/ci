name: Repackage Coco App Release

defaults:
  run:
    shell: bash
env:
  GO_VERSION: ${{ vars.GO_VERSION }}
  NODEJS_VERSION: ${{ vars.NODEJS_VERSION }}
  PRE_RELEASE: ${{ vars.PRE_RELEASE }}
  RELEASE_URL: ${{ vars.RELEASE_URL }}
  GITHUB_API_RELEASES_URL: "https://api.github.com/repos/infinilabs/coco-app/releases"
  BASE_URL_PREFIX: "https://github.com/infinilabs/coco-app/releases/download"
  FILE_EXTENSIONS: '\.(dmg|deb|exe)$'
  UPGRADE_FILE_EXTENSIONS: '\.(gz|sig|AppImage|exe|json)$'

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g., v0.2.0)'
        required: true
        default: 'v0.2.0'
      build_number:
        description: 'Build number (e.g., 1992)'
        required: true
        default: '1992'

jobs:
  repackage:
    runs-on: ubuntu-latest
    env:
        OSS_EP: ${{ secrets.OSS_EP }}
        OSS_AK: ${{ secrets.OSS_AK }}
        OSS_SK: ${{ secrets.OSS_SK }}
        OSS_BK: ${{ secrets.OSS_BK }}
        OSS_MODE: ${{ secrets.OSS_MODE }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate inputs
        run: |
          set -euo pipefail

          # Validate tag format (vX.Y.Z)
          if ! [[ "${{ inputs.tag }}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "::error::Invalid tag format. Must be vX.Y.Z (e.g., v0.2.0)"
            exit 1
          fi

          # Validate build_number (positive integer)
          if ! [[ "${{ inputs.build_number }}" =~ ^[1-9][0-9]*$ ]]; then
            echo "::error::Invalid build_number. Must be a positive integer."
            exit 1
          fi

      - name: Setup env
        run: |
          source $GITHUB_WORKSPACE/scripts/go-init.sh
          $GITHUB_WORKSPACE/scripts/env-init.sh
          connect -c "$GITHUB_WORKSPACE/.oss.json" >/dev/null 2>&1 &
          if [[ "$(echo "${{ vars.PRE_RELEASE }}" | tr '[:upper:]' '[:lower:]')" == "true" ]]; then
            grep -wq "pre" $GITHUB_WORKSPACE/.oss.yml || echo "pre: true" >> $GITHUB_WORKSPACE/.oss.yml
          fi
          VERSION=$(echo "${{ inputs.tag }}" | sed 's/^v//')
          echo "VER=$VERSION" >> $GITHUB_ENV
          echo "TAG=${{ inputs.tag }}" >> $GITHUB_ENV
          echo PNAME=coco/app >> $GITHUB_ENV
          echo PATH=$PATH:$GITHUB_WORKSPACE/tools >> $GITHUB_ENV

      - name: Get Release Asset Names
        run: |
          ASSET_NAMES=$(curl -s -H "Accept: application/vnd.github.v3+json" \
            "$GITHUB_API_RELEASES_URL/tags/${{ inputs.tag }}" | \
            jq -r '.assets[].name')
          echo "$ASSET_NAMES" > asset_names.txt
          cat asset_names.txt

      - name: Download and Install Assets
        run: |
          BASE_URL="$BASE_URL_PREFIX/$TAG"

          grep -E -i "$FILE_EXTENSIONS" asset_names.txt | while read -r filename; do
            echo "Downloading $filename ..."
            url="$BASE_URL/$filename"
            curl -sSL -o "$filename" "$url"
          done

      - name: Download and Upgrade Assets
        run: |
          BASE_URL="$BASE_URL_PREFIX/$TAG"
          mkdir -p upgrade
          grep -E -i "$UPGRADE_FILE_EXTENSIONS" asset_names.txt | while read -r filename; do
            echo "Downloading $filename ..."
            url="$BASE_URL/$filename"
            curl -sSL -o upgrade/"$filename" "$url"
          done
      
      - name: Update the download url
        run: |
          jq --arg VER "$VER" \
             --arg URL "https://release.infinilabs.com/coco/app/stable/.$TAG/" \
             --arg GH_URL "https://github.com/infinilabs/coco-app/releases/download/v" \
            '
              .version = $VER |
              .platforms |= map_values(
                .url |= (
                  if startswith("\($GH_URL)\($VER)") then
                    "\($URL)\(sub("\($GH_URL)\($VER)/"; ""))"
                  else
                    .
                  end
                )
              )
            ' upgrade/latest.json > .latest.json && rm -rf upgrade/latest.json

      - name: Repackage Assets
        run: |
          set -euo pipefail

          VERSION=$VER
          BUILD_NUMBER="${{ inputs.build_number }}"

          echo "Repack VERSION: $VERSION, BUILD_NUMBER: $BUILD_NUMBER"

          declare -A FILE_MAP=(
            ["x86-setup.exe"]="windows-386.exe"
            ["x64-setup.exe"]="windows-amd64.exe"
            ["arm64-setup.exe"]="windows-arm64.exe"
            ["x64.dmg"]="mac-amd64.dmg"
            ["aarch64.dmg"]="mac-arm64.dmg"
            ["amd64.deb"]="linux-amd64.deb"
            ["aarch64.deb"]="linux-arm64.deb"
          )

          while read -r old_name; do
            base_name=$(basename "$old_name")
            extension="${base_name##*.}"
            matched=false
            for pattern in "${!FILE_MAP[@]}"; do
              if [[ "$base_name" == *"$pattern"* ]]; then
                new_suffix_with_ext="${FILE_MAP[$pattern]}"
                new_suffix=$(echo "$new_suffix_with_ext" | sed "s/\.${extension}$//")

                new_base_name="Coco-AI-${VERSION}-${BUILD_NUMBER}-${new_suffix}"
                new_name_with_ext="${new_base_name}.${extension}"

                mv "$old_name" "$new_name_with_ext"
                zip -q "$new_base_name.zip" "$new_name_with_ext"
                matched=true
                break
              fi
            done

            if [ "$matched" = false ]; then
                echo "Warning: No mapping found for $old_name.  Skipping." >&2
            fi
          done < <(find . -type f \( -name "*.exe" -o -name "*.dmg" -o -name "*.deb" \) | sort) 
          # List repackaged files
          echo "Repackaged files:"
          ls -lh *.zip

      - name: Upload coco app files
        run: |
          # Upload repackaged files
          for file in *.zip; do
            oss upload -c $GITHUB_WORKSPACE/.oss.yml -o -p $PNAME -f $file
          done
          # Upload upgrade files
          for upgrade_file in upgrade/*; do
            oss upload -c $GITHUB_WORKSPACE/.oss.yml -o -p "$PNAME/.${TAG}" -f $upgrade_file
          done
          # Upload .latest.json
          oss upload -c $GITHUB_WORKSPACE/.oss.yml -o -p $PNAME -f .latest.json