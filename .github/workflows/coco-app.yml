name: Coco App Files Publish 
defaults:
  run:
    shell: bash
env:
  CI: false
  REPO-NAME: "coco-app"
  PNAME: "coco/app"
  OSS_PATH: /Release/coco/app/snapshot
  RELEASE_URL: ${{ vars.RELEASE_URL }}
  OSS_EP: ${{ secrets.OSS_EP }}
  OSS_AK: ${{ secrets.OSS_AK }}
  OSS_SK: ${{ secrets.OSS_SK }}
  OSS_BK: ${{ secrets.OSS_BK }}
  OSS_MODE: ${{ secrets.OSS_MODE }}
  TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
  TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ""
  APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
  APPLE_CERTIFICATE_PASSWORD: ""
  APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
  APPLE_ID: ${{ secrets.APPLE_ID }}
  APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
  APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
  NODEJS_VERSION: 20
  FILE_EXTENSIONS: '\.(dmg|rpm|deb|exe)$'
  UPGRADE_FILE_EXTENSIONS: '\.(gz|sig|AppImage|exe|json)$'

on:
  push:
    tags:
      - 'release*'
  schedule:
    - cron: '30 4/19 * * *'
  workflow_dispatch:
    inputs:
      PUBLISH_VERSION:
        description: 'Publish Version'
        required: false
        default: "0.4.0-2016"
      PUBLISH_RELEASE:
        description: 'Publish Release'
        required: false
        type: boolean
        default: false
jobs:
  build-app:
    env:
      PUBLISH_VERSION: ${{ inputs.PUBLISH_VERSION || vars.COCO_APP_PUBLISH_VERSION }}
      VITE_LOG_LEVEL: 'warn'
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: "macos-latest"
            target: "aarch64-apple-darwin"
          - platform: "macos-latest"
            target: "x86_64-apple-darwin"

          - platform: "windows-latest"
            target: "x86_64-pc-windows-msvc"
          - platform: "windows-latest"
            target: "i686-pc-windows-msvc"
          - platform: "windows-latest"
            target: "aarch64-pc-windows-msvc"

          - platform: "ubuntu-22.04"
            target: "x86_64-unknown-linux-gnu"
          - platform: "ubuntu-22.04"
            target: "i686-unknown-linux-gnu"
          - platform: "ubuntu-22.04-arm"
            target: "aarch64-unknown-linux-gnu"

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Checkout coco app repository
        uses: actions/checkout@v4
        with: 
          repository: ${{ vars.GIT_REPO }}/${{ env.REPO-NAME }}
          ref: main
          path: ${{ env.REPO-NAME }}

      - name: Set version & tag with ${{ matrix.platform }}
        if: ${{ inputs.PUBLISH_RELEASE }}
        working-directory: ${{ env.REPO-NAME }}
        shell: bash
        run: |
          current_version=$PUBLISH_VERSION
          if [[ -z "$current_version" ]]; then
            echo "PUBLISH_VERSION is not set or is empty." >&2
            exit 1
          fi

          # Extract x.y.z using a regular expression
          if [[ "$current_version" =~ ^([0-9]+\.[0-9]+\.[0-9]+)-([1-9][0-9]*)$ ]]; then
            current_version="${BASH_REMATCH[1]}"
            build_number="${BASH_REMATCH[2]}"
          else
            echo "Invalid PUBLISH_VERSION format: '$current_version'. Expected x.y.z or x.y.z-suffix." >&2
            exit 1
          fi

          version="$current_version"
          if ${{ matrix.platform == 'macos-latest' }}; then
            echo "Build version: $version at $(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S')"
            sed -i '' "s/\"version\": *\"[^\"]*\"/\"version\": \"$version\"/" package.json
            sed -i '' "s/^version = *\"[^\"]*\"/version = \"$version\"/" src-tauri/Cargo.toml
          elif ${{ matrix.platform == 'windows-latest' }}; then
            echo "Build version: $version at $(TZ=Asia/Shanghai date -d '+8 hour' '+%Y-%m-%d %H:%M:%S')"
            sed -i -e "s/\"version\": *\"[^\"]*\"/\"version\": \"$version\"/" package.json
            sed -i -e "s/^version = *\"[^\"]*\"/version = \"$version\"/" src-tauri/Cargo.toml
          else
            echo "Build version: $version at $(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S')"
            sed -i -e "s/\"version\": *\"[^\"]*\"/\"version\": \"$version\"/" package.json
            sed -i -e "s/^version = *\"[^\"]*\"/version = \"$version\"/" src-tauri/Cargo.toml
          fi
          
          tag=".v${current_version}"
          echo "VERSION=$version-$build_number" >> $GITHUB_ENV
          echo "UPGRADE=$tag" >> $GITHUB_ENV

      - name: Set Version with ${{ matrix.platform }}
        if: ${{ !inputs.PUBLISH_RELEASE }}
        working-directory: ${{ env.REPO-NAME }}
        shell: bash
        run: |
          current_version=$PUBLISH_VERSION
          if [[ -z "$current_version" ]]; then
            echo "PUBLISH_VERSION is not set or is empty." >&2
            exit 1
          fi

          # Extract x.y.z using a regular expression
          if [[ "$current_version" =~ ^([0-9]+\.[0-9]+\.[0-9]+) ]]; then
            current_version="${BASH_REMATCH[1]}"
          else
            echo "Invalid PUBLISH_VERSION format: '$current_version'. Expected x.y.z or x.y.z-suffix." >&2
            exit 1
          fi
          build_number=$(TZ=Asia/Shanghai date +%Y%m%d)
          IFS=. read -r major minor patch <<< "$current_version"
          tauri_version="$major.$minor.$((patch + 1))"
          version="$tauri_version-NIGHTLY-$build_number"
          if ${{ matrix.platform == 'macos-latest' }}; then
            echo "Build version: $version at $(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S')"
            sed -i '' "s/\"version\": *\"[^\"]*\"/\"version\": \"$version\"/" package.json
            sed -i '' "s/^version = *\"[^\"]*\"/tauri_version = \"$version\"/" src-tauri/Cargo.toml
          elif ${{ matrix.platform == 'windows-latest' }}; then
            build_number=$(TZ=Asia/Shanghai date -d '+8 hour' '+%Y%m%d')
            version="$tauri_version-NIGHTLY-$build_number"
            echo "Build version: $version and tauri version: $tauri_version at $(TZ=Asia/Shanghai date -d '+8 hour' '+%Y-%m-%d %H:%M:%S')"
            sed -i -e "s/\"version\": *\"[^\"]*\"/\"version\": \"$version\"/" package.json
            sed -i -e "s/^version = *\"[^\"]*\"/version = \"$tauri_version\"/" src-tauri/Cargo.toml
          else
            echo "Build version: $version and tauri version: $tauri_version at $(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S')"
            sed -i -e "s/\"version\": *\"[^\"]*\"/\"version\": \"$version\"/" package.json
            sed -i -e "s/^version = *\"[^\"]*\"/version = \"$tauri_version\"/" src-tauri/Cargo.toml
          fi
          
          echo "VERSION=$version" >> $GITHUB_ENV

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODEJS_VERSION }}

      - uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Install rust target
        run: rustup target add ${{ matrix.target }}

      - name: Install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          TARGET_PLATFORM="${{ matrix.target }}"
          if [ "$TARGET_PLATFORM" = "x86_64-unknown-linux-gnu" ]; then
              sudo apt-get update
              sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf
          elif [ "$TARGET_PLATFORM" = "i686-unknown-linux-gnu" ]; then
              echo "configure PKG_CONFIG_PATH and PKG_CONFIG_SYSROOT_DIR for ${{ matrix.target }} of tauri"
              sudo dpkg --add-architecture i386
              sudo apt-get update
              sudo apt-get install -y libwebkit2gtk-4.1-dev:i386 libappindicator3-dev:i386 librsvg2-dev:i386 patchelf:i386
              export PKG_CONFIG_PATH=/usr/lib/i386-linux-gnu/pkgconfig/:$PKG_CONFIG_PATH
              export PKG_CONFIG_SYSROOT_DIR=/
          elif [ "$TARGET_PLATFORM" = "aarch64-unknown-linux-gnu" ]; then
              echo "configure PKG_CONFIG_PATH and PKG_CONFIG_SYSROOT_DIR for ${{ matrix.target }} of tauri"
              sudo dpkg --add-architecture arm64
              sudo apt-get update
              sudo apt-get install -y libwebkit2gtk-4.1-dev:arm64 libappindicator3-dev:arm64 librsvg2-dev:arm64 patchelf:arm64
              export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc
              export CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc
              export CXX_aarch64_unknown_linux_gnu=aarch64-linux-gnu-g++
              export PKG_CONFIG_PATH=/usr/lib/aarch64-linux-gnu/pkgconfig
              export PKG_CONFIG_ALLOW_CROSS=1
          else
              echo "Unknown target: $TARGET_PLATFORM" && exit 1
          fi

      - name: Install Rust stable
        run: rustup toolchain install stable --no-self-update

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './coco-app/src-tauri -> target'

      - name: Sync node version and setup cache
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODEJS_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: "**/pnpm-lock.yaml"

      - name: Install app dependencies and build web
        working-directory: ${{ env.REPO-NAME }}
        run: pnpm install --no-frozen-lockfile

      - name: Build app
        working-directory: ${{ env.REPO-NAME }}
        run: pnpm tauri build --target ${{ matrix.target }}

      - name: Rename upgrade asserts
        working-directory: ${{ env.REPO-NAME }}
        run: |
          bundle_dir="src-tauri/target/${{ matrix.target }}/release/bundle"
          base_dir="${bundle_dir}"

          if [[ "${{ matrix.target }}" == *"apple-darwin"* ]]; then
            base_dir+="/macos"
          elif [[ "${{ matrix.target }}" == *"linux-gnu"* ]]; then
            base_dir+="/appimage"
          elif [[ "${{ matrix.target }}" == *"windows-msvc"* ]]; then
            base_dir+="/nsis"
          fi

          puer_version="$(echo "$VERSION" | sed 's/-.*//')"
          version="$VERSION"

          find "$base_dir" -type f -name "*${puer_version}*" -print0 | while IFS= read -r -d $'\0' file; do
            new_file="${file/$puer_version/${version}}"
            echo "Renaming '$file' to '$new_file'"
            mv "$file" "$new_file"
          done
          # Delete the ubuntu files
          if [[ "${{ matrix.target }}" == "x86_64-unknown-linux-gnu" ]]; then
            find "$bundle_dir" \
              \( \
                -name "*amd64.deb.sig" -o \
                -name "*x86_64.rpm.sig" -o \
                -name "control.tar.gz" -o \
                -name "data.tar.gz" \
              \) -print0 | xargs -0 rm -f
          fi
          # Rename the darwin
          if [[ "${{ matrix.target }}" == "aarch64-apple-darwin" ]]; then
            mv "${base_dir}/Coco-AI.app.tar.gz.sig" "${base_dir}/Coco-AI_${version}_arm64.app.tar.gz.sig"
            mv "${base_dir}/Coco-AI.app.tar.gz" "${base_dir}/Coco-AI_${version}_arm64.app.tar.gz"
          elif [[ "${{ matrix.target }}" == "x86_64-apple-darwin" ]]; then
            mv "${base_dir}/Coco-AI.app.tar.gz.sig" "${base_dir}/Coco-AI_${version}_amd64.app.tar.gz.sig"
            mv "${base_dir}/Coco-AI.app.tar.gz" "${base_dir}/Coco-AI_${version}_amd64.app.tar.gz"
          fi
          
      - name: Check files
        working-directory: ${{ env.REPO-NAME }}
        shell: bash
        run: |
          target="src-tauri/target/${{ matrix.target }}/release/bundle"
          find "$target" -type f \( \
                  -name "*.dmg" -o \
                  -name "*.deb" -o \
                  -name "*.rpm" -o \
                  -name "*.exe" -o \
                  -name "*.gz" -o \
                  -name "*.sig" -o \
                  -name "*.AppImage" \
              \)

      - name: Upload upgrade assets to OSS with ${{ matrix.target }}
        if: ${{ inputs.PUBLISH_RELEASE }}
        uses: infinilabs/oss-upload@v0
        with:
          region: oss-cn-shanghai
          access-key-id: ${{ secrets.OSS_AK }}
          access-key-secret: ${{ secrets.OSS_SK }}
          bucket: ${{ secrets.OSS_BK }}
          secure: false
          local-folder: ${{ github.workspace }}/${{ env.REPO-NAME }}/src-tauri/target/${{ matrix.target }}/release/bundle
          file-pattern: '**/*.{AppImage,sig,exe,gz}'
          remote-dir: "${{ env.OSS_PATH }}/${{ env.UPGRADE }}"

      - name: Upload assets to OSS with ${{ matrix.target }}
        uses: infinilabs/oss-upload@v0
        with:
          region: oss-cn-shanghai
          access-key-id: ${{ secrets.OSS_AK }}
          access-key-secret: ${{ secrets.OSS_SK }}
          bucket: ${{ secrets.OSS_BK }}
          secure: true
          local-folder: ${{ github.workspace }}/${{ env.REPO-NAME }}/src-tauri/target/${{ matrix.target }}/release/bundle
          file-pattern: '**/*.{exe,dmg,deb,rpm}'
          repack-version: "${{ env.VERSION }}"
          remote-dir: ${{ env.OSS_PATH }}

  release:
    needs: "build-app"
    if: ${{ inputs.PUBLISH_RELEASE }}
    runs-on: ubuntu-latest
    env:
      PUBLISH_VERSION: ${{ inputs.PUBLISH_VERSION || vars.COCO_APP_PUBLISH_VERSION }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Reset cache
        run: |
          # reset the cache
          curl -s -H "X-Token: $TOKEN" "$RELEASE_URL/_flush?versions=$PURE_VERSION" > /dev/null
          sleep 30

      - name: Init Env
        run: |
          $GITHUB_WORKSPACE/scripts/env-init.sh
          # Setup environment
          current_version=$PUBLISH_VERSION
          if [[ -z "$current_version" ]]; then
            echo "PUBLISH_VERSION is not set or is empty." >&2
            exit 1
          fi

          # Extract x.y.z using a regular expression
          if [[ "$current_version" =~ ^([0-9]+\.[0-9]+\.[0-9]+)-([1-9][0-9]*)$ ]]; then
            current_version="${BASH_REMATCH[1]}"
            build_number="${BASH_REMATCH[2]}"
          else
            echo "Invalid PUBLISH_VERSION format: '$current_version'. Expected x.y.z or x.y.z-suffix." >&2
            exit 1
          fi

          tag=".v${current_version}"
          echo "UPGRADE=$tag" >> $GITHUB_ENV
          echo "PURE_VERSION=$current_version" >> $GITHUB_ENV
          echo "VERSION=$current_version-$build_number" >> $GITHUB_ENV
          echo "PRE_UPGRADE_PATH=$PNAME/snapshot/$tag" >> $GITHUB_ENV
          echo "RELEASE_UPGRADE_PATH=$PNAME/stable/$tag" >> $GITHUB_ENV

      - name: Generate .latest.json
        shell: bash
        run: ${GITHUB_WORKSPACE}/products/coco-app/generate-latest-json.sh

  notify_on_failure:
    runs-on: ubuntu-latest
    needs: [build-app, release]
    if: failure()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Send Feishu Notification on Failure
        env:
          FEISHU_BOT_URL: ${{ secrets.FEISHU_BOT_WEBHOOK_URL }}
          REPO_NAME: ${{ github.repository }}
          WORKFLOW_NAME: ${{ github.workflow }}
          RUN_ID: ${{ github.run_id }}
          ACTOR: ${{ github.triggering_actor }}
          SERVER_URL: ${{ github.server_url }}
        run: $GITHUB_WORKSPACE/scripts/feishu_message.sh        