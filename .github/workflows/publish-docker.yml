name: Publish Products Files & Docker 
defaults:
  run:
    shell: bash
env:
  TZ: Asia/Shanghai
  GO_VERSION: ${{ vars.GO_VERSION }}
  NODEJS_VERSION: ${{ vars.NODEJS_VERSION }}
  PRE_RELEASE: ${{ vars.PRE_RELEASE }}
  RELEASE_URL: ${{ vars.RELEASE_URL }}
  PUBLISH_VERSION: ${{ inputs.PUBLISH_VERSION || vars.PUBLISH_VERSION }}
  
on:
  push:
    tags:
      - 'release*'  
  schedule:
    - cron: '30 16 * * *'  
  workflow_dispatch:
    inputs:
      AGENT_PUBLISH:
        description: 'Agent'
        required: false
        type: boolean
        default: true
      CONSOLE_PUBLISH:
        description: 'Console'
        required: false
        type: boolean
        default: true
      GATEWAY_PUBLISH:
        description: 'Gateway'
        required: false
        type: boolean
        default: true
      LOADGEN_PUBLISH:
        description: 'Loadgen'
        required: false
        type: boolean
        default: true
      PUBLISH_VERSION:
        description: 'Publish Release Version'
        required: false
        default: "1.29.7"
      PUBLISH_RELEASE:
        description: 'Publish Release'
        required: false
        type: boolean
        default: false       
      ONLY_DOCKER:
        description: 'Publish Docker <Only>'
        required: false
        type: boolean
        default: false         

jobs:
  generate-matrix: 
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.gen-matrix.outputs.matrix }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate matrix
        id: gen-matrix
        env:
            AGENT_PUBLISH: ${{ inputs.AGENT_PUBLISH }}
            CONSOLE_PUBLISH: ${{ inputs.CONSOLE_PUBLISH }}
            GATEWAY_PUBLISH: ${{ inputs.GATEWAY_PUBLISH }}
            LOADGEN_PUBLISH: ${{ inputs.LOADGEN_PUBLISH }}
        run: |
          matrix=$($GITHUB_WORKSPACE/scripts/go-matrix.sh)
          echo "matrix=$matrix" >> "$GITHUB_OUTPUT"
          cat "$GITHUB_OUTPUT"

  publish:
    needs: generate-matrix
    name: Publish ${{ matrix.product }}
    runs-on: ubuntu-latest
    env:
        OSS_EP: ${{ secrets.OSS_EP }}
        OSS_AK: ${{ secrets.OSS_AK }}
        OSS_SK: ${{ secrets.OSS_SK }}
        OSS_BK: ${{ secrets.OSS_BK }}
        OSS_MODE: ${{ secrets.OSS_MODE }}
        LOCAL_HOST: ${{ secrets.LOCAL_HOST }}
        LOCAL_PORT: ${{ secrets.LOCAL_PORT }}
        SSH_GIT_REPO: ${{ secrets.SSH_GIT_REPO }}
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        SSH_CONFIG: ${{ secrets.SSH_CONFIG }}
        CONNECT_SERVER: ${{ secrets.CONNECT_SERVER }}
        CONNECT_PORT: ${{ secrets.CONNECT_PORT }}
        CONNECT_KEY: ${{ secrets.CONNECT_KEY }}
        CONNECT_TIMEOUT: ${{ vars.CONNECT_TIMEOUT }}
        CONNECT_MODE: ${{ vars.CONNECT_MODE }}
        CONNECT_METHOD: ${{ secrets.CONNECT_METHOD }}
        TARGETS: win-amd64 win-386 linux-amd64 linux-amd64-dev linux-386 linux-mips64 linux-mips64le linux-armv6 linux-armv7 linux-arm64 linux-loong64 linux-riscv64 darwin-amd64 darwin-arm64
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.generate-matrix.outputs.matrix) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup bootstrap
        uses: ./containers/bootstrap

      - name: Checkout framework code
        uses: actions/checkout@v4
        with: 
          repository: ${{ vars.GIT_REPO }}/framework
          ref: main
          path: framework

      - name: Checkout framework vendor code
        uses: actions/checkout@v4
        with: 
          repository: ${{ vars.GIT_REPO }}/framework-vendor
          ref: main
          path: vendor

      - name: Checkout ${{ matrix.product }} code
        uses: actions/checkout@v4
        with: 
          repository: ${{ vars.GIT_REPO }}/${{ matrix.product }}
          ref: main
          path: ${{ matrix.product }}

      - name: Setup ${{ matrix.product }} env
        run: |
          source $GITHUB_WORKSPACE/scripts/go-init.sh
          if [[ "$(echo "${{ vars.PRE_RELEASE }}" | tr '[:upper:]' '[:lower:]')" == "true" ]]; then
            grep -wq "pre" $GITHUB_WORKSPACE/.oss.yml || echo "pre: true" >> $GITHUB_WORKSPACE/.oss.yml
          fi
          echo WORK=$WORK >> $GITHUB_ENV
          echo WORKBASE=$WORKBASE >> $GITHUB_ENV
          echo PNAME=${{ matrix.product }} >> $GITHUB_ENV
          echo PATH=$PATH:$GITHUB_WORKSPACE/tools >> $GITHUB_ENV

      - name: Setup ${{ matrix.product }} go toolchain
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          check-latest: false
          cache: true
          cache-dependency-path: "**/*.sum"

      - name: Check ${{ matrix.product }} go toolchain
        run: go version

      - name: Set up  with ${{ matrix.product }} nodejs toolchain
        if: matrix.product == 'console'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODEJS_VERSION }}
          cache: 'npm'
          cache-dependency-path: "**/package.json"

      - name: Check  with ${{ matrix.product }} nodejs toolchain
        if: matrix.product == 'console'
        run: |
          if ! command -v cnpm >/dev/null 2>&1; then
            npm install -g rimraf
            npm install -g cnpm@9.2.0
          fi
          node -v && npm -v && cnpm -v

      - name: Preper ${{ matrix.product }} build code
        if: ${{ inputs.PUBLISH_VERSION !='' || vars.PUBLISH_VERSION !='' }}
        run: |
          cd $WORK/$PNAME
          echo "Build $PNAME at $PWD"
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            if [[ "${{ inputs.PUBLISH_RELEASE}}" != "true" ]]; then
              PUBLISH_VERSION=${{ vars.PUBLISH_VERSION }}
            fi
          fi
          PUBLISH_RELEASE="${{ inputs.PUBLISH_RELEASE || vars.PUBLISH_RELEASE || 'FALSE' }}"
          if [[ "$(echo "$PUBLISH_RELEASE" | tr '[:upper:]' '[:lower:]')" == "true" ]]; then
            if [[ "$PUBLISH_VERSION" == *-* ]]; then
              IFS=- read -r DYNAMIC_VERSION DYNAMIC_BUILD_NUMBER <<< "$PUBLISH_VERSION"
            else
              RUN_NUMBER=${{ github.run_number }}
              OFFSET=${{ vars.OFFSET }}
              DYNAMIC_BUILD_NUMBER=$((RUN_NUMBER + OFFSET))
              DYNAMIC_VERSION="$PUBLISH_VERSION"
            fi
          else
            DYNAMIC_BUILD_NUMBER=$(date +%Y%m%d)
            DYNAMIC_VERSION=$(echo "$PUBLISH_VERSION" | awk -F. -v OFS=. '{ $3 = $3 + 1; print $1, $2, $3 "_NIGHTLY" }')
            if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
              DYNAMIC_VERSION=$(echo "$PUBLISH_VERSION" | awk -F. -v OFS=. '{ $3 = $3 + 1; print $1, $2, $3 "_SNAPSHOT" }')
              RUN_NUMBER=${{ github.run_number }}
              OFFSET=${{ vars.OFFSET }}
              DYNAMIC_BUILD_NUMBER=$((RUN_NUMBER + OFFSET))
            fi
          fi
          echo "Build $PNAME with $DYNAMIC_VERSION-$DYNAMIC_BUILD_NUMBER"

          echo VERSION=$DYNAMIC_VERSION >> $GITHUB_ENV
          echo BUILD_NUMBER=$DYNAMIC_BUILD_NUMBER >> $GITHUB_ENV
          echo EOL=$(date -u -d "1 year" +"%Y-12-31T10:10:10Z") >> $GITHUB_ENV
          echo BUILD_DATE=$(date '+%Y-%m-%d %H:%M:%S') >> $GITHUB_ENV

      - name: Build ${{ matrix.product }} with ${{ env.VERSION }}-${{ env.BUILD_NUMBER }}
        run: |
          if [[ "${{ matrix.product }}" == "console" ]]; then
            cd $WORK/$PNAME/web && cnpm install --quiet --no-progress && cnpm run build --quiet
          fi
          # build all targets
          for tag in $TARGETS; do
            cd $WORK/$PNAME && GOMODULE=false make build-$tag
          done

      - name: Build ${{ matrix.product }} check
        run: |
          ls -lrt $WORK/$PNAME/bin
          for tag in $TARGETS; do
            IFS='-' read -r p1 p2 <<< "$tag"
            TAG="$(echo $p1|sed 's/darwin/mac/;s/win/windows/')-$p2"
            [[ "$p1" == "win" ]] && TAG="$TAG.exe"
            [ -f "$WORK/$PNAME/bin/$PNAME-$TAG" ] || { echo "Build $PNAME failed with not found $PNAME-$TAG" && exit 1; }
          done

      - name: Build ${{ matrix.product }} License and notice process
        run: |
          cp -rf $WORK/$PNAME/config $WORK/$PNAME/bin
          find $WORK/$PNAME/bin -name "*.go" -delete
          if [[ "${{ matrix.product }}" == "console" ]]; then
            PERMJSON=$WORK/$PNAME/modules/security/realm/authc/native/permission.json
            if [[ -e $PERMJSON ]]; then
              cp -rf $PERMJSON $WORK/$PNAME/bin/config
            fi
          fi
          cp -rf $WORK/framework/LICENSE $WORK/$PNAME/bin && cat $WORK/framework/NOTICE $WORK/$PNAME/NOTICE > $WORK/$PNAME/bin/NOTICE
          ls -lrt $WORK/$PNAME/bin

      - name: Set up qemu with ${{ matrix.product }}
        uses: docker/setup-qemu-action@v3

      - name: Set up docker buildx with ${{ matrix.product }}
        uses: docker/setup-buildx-action@v3
        #with:
        #  buildkitd-flags: --debug

      - name: Login to dockerhub with ${{ matrix.product }}
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Docker build meta with ${{ matrix.product }}
        id: tags
        run: |
          echo REPO_NAME=${{ vars.DOCKER_REPO }}/${{ matrix.product }} >> $GITHUB_ENV
          if [[ "${{ inputs.PUBLISH_RELEASE }}" == "true" ]]; then
            echo "RELEASE_TAG=${{ vars.DOCKER_REPO }}/${{ matrix.product }}:${{ env.VERSION }}" >> "$GITHUB_OUTPUT"
          fi

      - name: Docker build and push for ${{ matrix.product }} with ${{ env.VERSION }}-${{ env.BUILD_NUMBER }}
        uses: docker/build-push-action@v6
        with:
          context: ${{ github.workspace }}/${{ matrix.product }}/bin
          file: ${{ github.workspace }}/products/${{ matrix.product }}/Dockerfile
          target: prod
          platforms: |
            linux/386
            linux/arm/v6
            linux/arm/v7
            linux/amd64
            linux/arm64
            linux/riscv64
          tags: |
            ${{ env.REPO_NAME }}:${{ env.VERSION }}-${{ env.BUILD_NUMBER }}
            ${{ steps.tags.outputs.RELEASE_TAG }}
          push: true

      - name: Archive ${{ matrix.product }} files
        if: ${{ ! inputs.ONLY_DOCKER }}
        run: |
          cd $WORK/$PNAME/bin
          for tag in $TARGETS; do
            IFS='-' read -r p1 p2 <<< "$tag"
            TAG="$(echo $p1|sed 's/darwin/mac/;s/win/windows/')-$p2"
            EXT=$TAG
            [[ "$p1" == "win" ]] && EXT="$TAG.exe"

            echo "Archive $PNAME-$p1-$p2 with [ VERSION $VERSION | BUILD_NUMBER $BUILD_NUMBER ] at $BUILD_DATE"
            if [[ "$p1" == "win" ]] || [[ "$p1" == "darwin" ]]; then
              zip -qr $WORK/$PNAME-$VERSION-$BUILD_NUMBER-$TAG.zip $PNAME-$EXT $PNAME.yml LICENSE NOTICE config
            else
              tar zcf $WORK/$PNAME-$VERSION-$BUILD_NUMBER-$TAG.tar.gz $PNAME-$EXT $PNAME.yml LICENSE NOTICE config
            fi
          done
          ls -lrt $WORK/$PNAME-$VERSION-*.*
                      
      - name: Upload ${{ matrix.product }} files
        if: ${{ ! inputs.ONLY_DOCKER }}
        run: | 
          cd $WORK
          for tag in $TARGETS; do
            IFS='-' read -r p1 p2 <<< "$tag"
            TAG="$(echo $p1|sed 's/darwin/mac/;s/win/windows/')-$p2"
            echo "Upload $PNAME with $VERSION-$BUILD_NUMBER at $PWD"
            if [[ "$p1" == "win" ]] || [[ "$p1" == "darwin" ]]; then
                [ -f $WORK/$PNAME-$VERSION-$BUILD_NUMBER-$TAG.zip ] && oss upload -c $GITHUB_WORKSPACE/.oss.yml -o -p $PNAME -f $WORK/$PNAME-$VERSION-$BUILD_NUMBER-$TAG.zip
            else
                [ -f $WORK/$PNAME-$VERSION-$BUILD_NUMBER-$TAG.tar.gz ] && oss upload -c $GITHUB_WORKSPACE/.oss.yml -o -p $PNAME -f $WORK/$PNAME-$VERSION-$BUILD_NUMBER-$TAG.tar.gz
            fi
          done

      - name: Run connect in background for ${{ matrix.product }}
        if: ${{ matrix.product == 'console' }}
        run: |
          connect -c "$GITHUB_WORKSPACE/.oss.json" >/dev/null 2>&1 &
          echo "Connect started with pid $!"
          sleep 15

      - name: Deploy ${{ matrix.product }} files & staging k8s
        if: ${{ matrix.product == 'console' }}
        timeout-minutes: 30
        continue-on-error: true
        run: |
          if [[ -f $WORK/$PNAME/bin/$PNAME-linux-amd64 ]]; then
            echo "Deploying $PNAME to staging at $(date +'%m-%d %H:%M:%S')"
            scp -r $WORK/$PNAME/bin/$PNAME-linux-amd64 staging:/infini/demo-environment/console/update
            echo "Uploaded $PNAME to staging at $(date +'%m-%d %H:%M:%S')"
            ssh staging 'bash -s' < $GITHUB_WORKSPACE/products/$PNAME/deploy.sh
          else
            echo "No $PNAME binary found"
          fi
          #Deploy docker
          echo "kubectl -n apollo set image statefulsets.apps/$PNAME $PNAME=$REPO_NAME:$VERSION-$BUILD_NUMBER" >> /tmp/update_image.sh
          echo "Deploying $PNAME to staging k8s"
          ssh staging 'bash -s' < /tmp/update_image.sh
          echo "Finished deploying $PNAME to staging at $(date +'%m-%d %H:%M:%S')"

  notify_on_failure:
    runs-on: ubuntu-latest
    needs: [publish]
    if: failure()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Send Feishu Notification on Failure
        env:
          FEISHU_BOT_URL: ${{ secrets.FEISHU_BOT_WEBHOOK_URL }}
          REPO_NAME: ${{ github.repository }}
          WORKFLOW_NAME: ${{ github.workflow }}
          RUN_ID: ${{ github.run_id }}
          ACTOR: ${{ github.triggering_actor }}
          SERVER_URL: ${{ github.server_url }}
        run: $GITHUB_WORKSPACE/scripts/feishu_message.sh
        
  refresh_on_success:
    runs-on: ubuntu-latest
    needs: [generate-matrix, publish]
    if: success()
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.generate-matrix.outputs.matrix) }}
    steps:
      - name: Refresh download page on success ${{ matrix.product }}
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "Refresh download page on ci success"
            sleep 5 && curl -o /dev/null -w "%{http_code}\n" -H 'x-reset-cache: true' "$RELEASE_URL/${{ matrix.product }}/snapshot/"
          fi